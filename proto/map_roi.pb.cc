// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_roi.proto

#include "map_roi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_5froi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapRoiPoint_map_5froi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5froi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapRoiPointCloud_map_5froi_2eproto;
namespace apollo {
namespace hdmap {
class MapRoiPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapRoiPoint> _instance;
} _MapRoiPoint_default_instance_;
class MapRoiPointCloudDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapRoiPointCloud> _instance;
} _MapRoiPointCloud_default_instance_;
class MapRoiStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapRoiStruct> _instance;
} _MapRoiStruct_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static void InitDefaultsscc_info_MapRoiPoint_map_5froi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_MapRoiPoint_default_instance_;
    new (ptr) ::apollo::hdmap::MapRoiPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapRoiPoint_map_5froi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapRoiPoint_map_5froi_2eproto}, {}};

static void InitDefaultsscc_info_MapRoiPointCloud_map_5froi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_MapRoiPointCloud_default_instance_;
    new (ptr) ::apollo::hdmap::MapRoiPointCloud();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapRoiPointCloud_map_5froi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapRoiPointCloud_map_5froi_2eproto}, {
      &scc_info_MapRoiPoint_map_5froi_2eproto.base,}};

static void InitDefaultsscc_info_MapRoiStruct_map_5froi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_MapRoiStruct_default_instance_;
    new (ptr) ::apollo::hdmap::MapRoiStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapRoiStruct_map_5froi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapRoiStruct_map_5froi_2eproto}, {
      &scc_info_MapRoiPointCloud_map_5froi_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_5froi_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_5froi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_5froi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_5froi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiPoint, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiPoint, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiPoint, z_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiPointCloud, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiStruct, road_polygons_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::MapRoiStruct, junction_polygons_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::hdmap::MapRoiPoint)},
  { 11, -1, sizeof(::apollo::hdmap::MapRoiPointCloud)},
  { 17, -1, sizeof(::apollo::hdmap::MapRoiStruct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_MapRoiPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_MapRoiPointCloud_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_MapRoiStruct_default_instance_),
};

const char descriptor_table_protodef_map_5froi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmap_roi.proto\022\014apollo.hdmap\";\n\013MapRoiP"
  "oint\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002 \001(\001:\003nan\022\014\n\001"
  "z\030\003 \001(\001:\0010\"=\n\020MapRoiPointCloud\022)\n\006points"
  "\030\001 \003(\0132\031.apollo.hdmap.MapRoiPoint\"\200\001\n\014Ma"
  "pRoiStruct\0225\n\rroad_polygons\030\001 \003(\0132\036.apol"
  "lo.hdmap.MapRoiPointCloud\0229\n\021junction_po"
  "lygons\030\002 \003(\0132\036.apollo.hdmap.MapRoiPointC"
  "loud"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_5froi_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_5froi_2eproto_sccs[3] = {
  &scc_info_MapRoiPoint_map_5froi_2eproto.base,
  &scc_info_MapRoiPointCloud_map_5froi_2eproto.base,
  &scc_info_MapRoiStruct_map_5froi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_5froi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5froi_2eproto = {
  false, false, descriptor_table_protodef_map_5froi_2eproto, "map_roi.proto", 284,
  &descriptor_table_map_5froi_2eproto_once, descriptor_table_map_5froi_2eproto_sccs, descriptor_table_map_5froi_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_map_5froi_2eproto::offsets,
  file_level_metadata_map_5froi_2eproto, 3, file_level_enum_descriptors_map_5froi_2eproto, file_level_service_descriptors_map_5froi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_5froi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_5froi_2eproto)), true);
namespace apollo {
namespace hdmap {

// ===================================================================

class MapRoiPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<MapRoiPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MapRoiPoint::MapRoiPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.MapRoiPoint)
}
MapRoiPoint::MapRoiPoint(const MapRoiPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&z_, &from.z_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&z_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.MapRoiPoint)
}

void MapRoiPoint::SharedCtor() {
  z_ = 0;
  x_ = std::numeric_limits<double>::quiet_NaN();
  y_ = std::numeric_limits<double>::quiet_NaN();
}

MapRoiPoint::~MapRoiPoint() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.MapRoiPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapRoiPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapRoiPoint::ArenaDtor(void* object) {
  MapRoiPoint* _this = reinterpret_cast< MapRoiPoint* >(object);
  (void)_this;
}
void MapRoiPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapRoiPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapRoiPoint& MapRoiPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapRoiPoint_map_5froi_2eproto.base);
  return *internal_default_instance();
}


void MapRoiPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.MapRoiPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    z_ = 0;
    x_ = std::numeric_limits<double>::quiet_NaN();
    y_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRoiPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1 [default = nan];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRoiPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.MapRoiPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.MapRoiPoint)
  return target;
}

size_t MapRoiPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.MapRoiPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double z = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double x = 1 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapRoiPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.MapRoiPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRoiPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapRoiPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.MapRoiPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.MapRoiPoint)
    MergeFrom(*source);
  }
}

void MapRoiPoint::MergeFrom(const MapRoiPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.MapRoiPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapRoiPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.MapRoiPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRoiPoint::CopyFrom(const MapRoiPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.MapRoiPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRoiPoint::IsInitialized() const {
  return true;
}

void MapRoiPoint::InternalSwap(MapRoiPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(z_, other->z_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRoiPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MapRoiPointCloud::_Internal {
 public:
};

MapRoiPointCloud::MapRoiPointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.MapRoiPointCloud)
}
MapRoiPointCloud::MapRoiPointCloud(const MapRoiPointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.MapRoiPointCloud)
}

void MapRoiPointCloud::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapRoiPointCloud_map_5froi_2eproto.base);
}

MapRoiPointCloud::~MapRoiPointCloud() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.MapRoiPointCloud)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapRoiPointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapRoiPointCloud::ArenaDtor(void* object) {
  MapRoiPointCloud* _this = reinterpret_cast< MapRoiPointCloud* >(object);
  (void)_this;
}
void MapRoiPointCloud::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapRoiPointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapRoiPointCloud& MapRoiPointCloud::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapRoiPointCloud_map_5froi_2eproto.base);
  return *internal_default_instance();
}


void MapRoiPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.MapRoiPointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRoiPointCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.hdmap.MapRoiPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRoiPointCloud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.MapRoiPointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.MapRoiPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.MapRoiPointCloud)
  return target;
}

size_t MapRoiPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.MapRoiPointCloud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.MapRoiPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapRoiPointCloud::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.MapRoiPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRoiPointCloud* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapRoiPointCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.MapRoiPointCloud)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.MapRoiPointCloud)
    MergeFrom(*source);
  }
}

void MapRoiPointCloud::MergeFrom(const MapRoiPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.MapRoiPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void MapRoiPointCloud::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.MapRoiPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRoiPointCloud::CopyFrom(const MapRoiPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.MapRoiPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRoiPointCloud::IsInitialized() const {
  return true;
}

void MapRoiPointCloud::InternalSwap(MapRoiPointCloud* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRoiPointCloud::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MapRoiStruct::_Internal {
 public:
};

MapRoiStruct::MapRoiStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  road_polygons_(arena),
  junction_polygons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.MapRoiStruct)
}
MapRoiStruct::MapRoiStruct(const MapRoiStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      road_polygons_(from.road_polygons_),
      junction_polygons_(from.junction_polygons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.MapRoiStruct)
}

void MapRoiStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapRoiStruct_map_5froi_2eproto.base);
}

MapRoiStruct::~MapRoiStruct() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.MapRoiStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapRoiStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapRoiStruct::ArenaDtor(void* object) {
  MapRoiStruct* _this = reinterpret_cast< MapRoiStruct* >(object);
  (void)_this;
}
void MapRoiStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapRoiStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapRoiStruct& MapRoiStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapRoiStruct_map_5froi_2eproto.base);
  return *internal_default_instance();
}


void MapRoiStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.MapRoiStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_polygons_.Clear();
  junction_polygons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRoiStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.hdmap.MapRoiPointCloud road_polygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.MapRoiPointCloud junction_polygons = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRoiStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.MapRoiStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.MapRoiPointCloud road_polygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_road_polygons(i), target, stream);
  }

  // repeated .apollo.hdmap.MapRoiPointCloud junction_polygons = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_junction_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_junction_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.MapRoiStruct)
  return target;
}

size_t MapRoiStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.MapRoiStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.MapRoiPointCloud road_polygons = 1;
  total_size += 1UL * this->_internal_road_polygons_size();
  for (const auto& msg : this->road_polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.MapRoiPointCloud junction_polygons = 2;
  total_size += 1UL * this->_internal_junction_polygons_size();
  for (const auto& msg : this->junction_polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapRoiStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.MapRoiStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRoiStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapRoiStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.MapRoiStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.MapRoiStruct)
    MergeFrom(*source);
  }
}

void MapRoiStruct::MergeFrom(const MapRoiStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.MapRoiStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_polygons_.MergeFrom(from.road_polygons_);
  junction_polygons_.MergeFrom(from.junction_polygons_);
}

void MapRoiStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.MapRoiStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRoiStruct::CopyFrom(const MapRoiStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.MapRoiStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRoiStruct::IsInitialized() const {
  return true;
}

void MapRoiStruct::InternalSwap(MapRoiStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  road_polygons_.InternalSwap(&other->road_polygons_);
  junction_polygons_.InternalSwap(&other->junction_polygons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRoiStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::MapRoiPoint* Arena::CreateMaybeMessage< ::apollo::hdmap::MapRoiPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::MapRoiPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::MapRoiPointCloud* Arena::CreateMaybeMessage< ::apollo::hdmap::MapRoiPointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::MapRoiPointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::MapRoiStruct* Arena::CreateMaybeMessage< ::apollo::hdmap::MapRoiStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::MapRoiStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
