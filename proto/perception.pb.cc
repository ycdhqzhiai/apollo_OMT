// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception.proto

#include "perception.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibrationServiceParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectorParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeatureParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LanePerceptionParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectTemplateParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostprocessorParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackerParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightParam_perception_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransformerParam_perception_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace app {
class PluginParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginParam> _instance;
} _PluginParam_default_instance_;
class DetectorParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectorParam> _instance;
} _DetectorParam_default_instance_;
class TrackerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackerParam> _instance;
} _TrackerParam_default_instance_;
class TransformerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformerParam> _instance;
} _TransformerParam_default_instance_;
class PostprocessorParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostprocessorParam> _instance;
} _PostprocessorParam_default_instance_;
class FeatureParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureParam> _instance;
} _FeatureParam_default_instance_;
class DebugParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugParam> _instance;
} _DebugParam_default_instance_;
class LanePerceptionParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LanePerceptionParam> _instance;
} _LanePerceptionParam_default_instance_;
class CalibrationServiceParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibrationServiceParam> _instance;
} _CalibrationServiceParam_default_instance_;
class ObjectTemplateParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectTemplateParam> _instance;
} _ObjectTemplateParam_default_instance_;
class TrafficLightParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightParam> _instance;
} _TrafficLightParam_default_instance_;
class PerceptionParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerceptionParam> _instance;
} _PerceptionParam_default_instance_;
}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_CalibrationServiceParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_CalibrationServiceParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::CalibrationServiceParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibrationServiceParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CalibrationServiceParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_DebugParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_DebugParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::DebugParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugParam_perception_2eproto}, {}};

static void InitDefaultsscc_info_DetectorParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_DetectorParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::DetectorParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectorParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetectorParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_FeatureParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_FeatureParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::FeatureParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeatureParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FeatureParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_LanePerceptionParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_LanePerceptionParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::LanePerceptionParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LanePerceptionParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LanePerceptionParam_perception_2eproto}, {
      &scc_info_DetectorParam_perception_2eproto.base,
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_ObjectTemplateParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_ObjectTemplateParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::ObjectTemplateParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectTemplateParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectTemplateParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_PerceptionParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_PerceptionParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::PerceptionParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PerceptionParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_PerceptionParam_perception_2eproto}, {
      &scc_info_DetectorParam_perception_2eproto.base,
      &scc_info_TrackerParam_perception_2eproto.base,
      &scc_info_TransformerParam_perception_2eproto.base,
      &scc_info_PostprocessorParam_perception_2eproto.base,
      &scc_info_FeatureParam_perception_2eproto.base,
      &scc_info_LanePerceptionParam_perception_2eproto.base,
      &scc_info_CalibrationServiceParam_perception_2eproto.base,
      &scc_info_DebugParam_perception_2eproto.base,
      &scc_info_ObjectTemplateParam_perception_2eproto.base,
      &scc_info_TrafficLightParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_PluginParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_PluginParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::PluginParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginParam_perception_2eproto}, {}};

static void InitDefaultsscc_info_PostprocessorParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_PostprocessorParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::PostprocessorParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostprocessorParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostprocessorParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_TrackerParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_TrackerParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::TrackerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackerParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackerParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLightParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_TrafficLightParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::TrafficLightParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLightParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static void InitDefaultsscc_info_TransformerParam_perception_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::app::_TransformerParam_default_instance_;
    new (ptr) ::apollo::perception::camera::app::TransformerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransformerParam_perception_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransformerParam_perception_2eproto}, {
      &scc_info_PluginParam_perception_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_perception_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_perception_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_perception_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_perception_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, root_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, config_file_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, plugin_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, camera_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrackerParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrackerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrackerParam, plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TransformerParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TransformerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TransformerParam, plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PostprocessorParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PostprocessorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PostprocessorParam, plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::FeatureParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::FeatureParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::FeatureParam, plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, detection_out_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, tracked_detection_out_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, track_out_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, detect_feature_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, lane_out_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, camera2world_out_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, calibration_out_dir_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, lane_detector_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, lane_postprocessor_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, lane_tracker_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, gpu_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, calibrator_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, plugin_param_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::ObjectTemplateParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::ObjectTemplateParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::ObjectTemplateParam, plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, detector_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, tracker_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, transformer_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, postprocessor_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, gpu_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, camera_intrinsics_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, feature_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, lane_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, calibration_service_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, debug_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, object_template_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, traffic_light_param_),
  ~0u,
  1,
  2,
  3,
  9,
  0,
  4,
  ~0u,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::perception::camera::app::PluginParam)},
  { 11, 18, sizeof(::apollo::perception::camera::app::DetectorParam)},
  { 20, 26, sizeof(::apollo::perception::camera::app::TrackerParam)},
  { 27, 33, sizeof(::apollo::perception::camera::app::TransformerParam)},
  { 34, 40, sizeof(::apollo::perception::camera::app::PostprocessorParam)},
  { 41, 47, sizeof(::apollo::perception::camera::app::FeatureParam)},
  { 48, 60, sizeof(::apollo::perception::camera::app::DebugParam)},
  { 67, 76, sizeof(::apollo::perception::camera::app::LanePerceptionParam)},
  { 80, 87, sizeof(::apollo::perception::camera::app::CalibrationServiceParam)},
  { 89, 95, sizeof(::apollo::perception::camera::app::ObjectTemplateParam)},
  { 96, 102, sizeof(::apollo::perception::camera::app::TrafficLightParam)},
  { 103, 120, sizeof(::apollo::perception::camera::app::PerceptionParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_PluginParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_DetectorParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_TrackerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_TransformerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_PostprocessorParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_FeatureParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_DebugParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_LanePerceptionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_CalibrationServiceParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_ObjectTemplateParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_TrafficLightParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::app::_PerceptionParam_default_instance_),
};

const char descriptor_table_protodef_perception_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020perception.proto\022\034apollo.perception.ca"
  "mera.app\"B\n\013PluginParam\022\014\n\004name\030\001 \001(\t\022\020\n"
  "\010root_dir\030\002 \001(\t\022\023\n\013config_file\030\003 \001(\t\"e\n\r"
  "DetectorParam\022\?\n\014plugin_param\030\001 \001(\0132).ap"
  "ollo.perception.camera.app.PluginParam\022\023"
  "\n\013camera_name\030\002 \001(\t\"O\n\014TrackerParam\022\?\n\014p"
  "lugin_param\030\001 \001(\0132).apollo.perception.ca"
  "mera.app.PluginParam\"S\n\020TransformerParam"
  "\022\?\n\014plugin_param\030\001 \001(\0132).apollo.percepti"
  "on.camera.app.PluginParam\"U\n\022Postprocess"
  "orParam\022\?\n\014plugin_param\030\001 \001(\0132).apollo.p"
  "erception.camera.app.PluginParam\"O\n\014Feat"
  "ureParam\022\?\n\014plugin_param\030\001 \001(\0132).apollo."
  "perception.camera.app.PluginParam\"\320\001\n\nDe"
  "bugParam\022\031\n\021detection_out_dir\030\001 \001(\t\022!\n\031t"
  "racked_detection_out_dir\030\002 \001(\t\022\026\n\016track_"
  "out_file\030\003 \001(\t\022\032\n\022detect_feature_dir\030\004 \001"
  "(\t\022\024\n\014lane_out_dir\030\005 \001(\t\022\035\n\025camera2world"
  "_out_file\030\006 \001(\t\022\033\n\023calibration_out_dir\030\007"
  " \001(\t\"\203\002\n\023LanePerceptionParam\022H\n\023lane_det"
  "ector_param\030\001 \001(\0132+.apollo.perception.ca"
  "mera.app.DetectorParam\022K\n\030lane_postproce"
  "ssor_param\030\002 \001(\0132).apollo.perception.cam"
  "era.app.PluginParam\022E\n\022lane_tracker_para"
  "m\030\003 \001(\0132).apollo.perception.camera.app.P"
  "luginParam\022\016\n\006gpu_id\030\004 \001(\005\"u\n\027Calibratio"
  "nServiceParam\022\031\n\021calibrator_method\030\002 \001(\t"
  "\022\?\n\014plugin_param\030\003 \001(\0132).apollo.percepti"
  "on.camera.app.PluginParam\"V\n\023ObjectTempl"
  "ateParam\022\?\n\014plugin_param\030\001 \001(\0132).apollo."
  "perception.camera.app.PluginParam\"T\n\021Tra"
  "fficLightParam\022\?\n\014plugin_param\030\001 \001(\0132).a"
  "pollo.perception.camera.app.PluginParam\""
  "\241\006\n\017PerceptionParam\022C\n\016detector_param\030\001 "
  "\003(\0132+.apollo.perception.camera.app.Detec"
  "torParam\022A\n\rtracker_param\030\002 \001(\0132*.apollo"
  ".perception.camera.app.TrackerParam\022I\n\021t"
  "ransformer_param\030\003 \001(\0132..apollo.percepti"
  "on.camera.app.TransformerParam\022M\n\023postpr"
  "ocessor_param\030\004 \001(\01320.apollo.perception."
  "camera.app.PostprocessorParam\022\016\n\006gpu_id\030"
  "\005 \001(\005\022\031\n\021camera_intrinsics\030\006 \001(\t\022A\n\rfeat"
  "ure_param\030\007 \001(\0132*.apollo.perception.came"
  "ra.app.FeatureParam\022E\n\nlane_param\030\010 \003(\0132"
  "1.apollo.perception.camera.app.LanePerce"
  "ptionParam\022X\n\031calibration_service_param\030"
  "\t \001(\01325.apollo.perception.camera.app.Cal"
  "ibrationServiceParam\022=\n\013debug_param\030\n \001("
  "\0132(.apollo.perception.camera.app.DebugPa"
  "ram\022P\n\025object_template_param\030\013 \001(\01321.apo"
  "llo.perception.camera.app.ObjectTemplate"
  "Param\022L\n\023traffic_light_param\030\014 \001(\0132/.apo"
  "llo.perception.camera.app.TrafficLightPa"
  "ram"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_perception_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_perception_2eproto_sccs[12] = {
  &scc_info_CalibrationServiceParam_perception_2eproto.base,
  &scc_info_DebugParam_perception_2eproto.base,
  &scc_info_DetectorParam_perception_2eproto.base,
  &scc_info_FeatureParam_perception_2eproto.base,
  &scc_info_LanePerceptionParam_perception_2eproto.base,
  &scc_info_ObjectTemplateParam_perception_2eproto.base,
  &scc_info_PerceptionParam_perception_2eproto.base,
  &scc_info_PluginParam_perception_2eproto.base,
  &scc_info_PostprocessorParam_perception_2eproto.base,
  &scc_info_TrackerParam_perception_2eproto.base,
  &scc_info_TrafficLightParam_perception_2eproto.base,
  &scc_info_TransformerParam_perception_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_perception_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_perception_2eproto = {
  false, false, descriptor_table_protodef_perception_2eproto, "perception.proto", 2123,
  &descriptor_table_perception_2eproto_once, descriptor_table_perception_2eproto_sccs, descriptor_table_perception_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_perception_2eproto::offsets,
  file_level_metadata_perception_2eproto, 12, file_level_enum_descriptors_perception_2eproto, file_level_service_descriptors_perception_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_perception_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_perception_2eproto)), true);
namespace apollo {
namespace perception {
namespace camera {
namespace app {

// ===================================================================

class PluginParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginParam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_root_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PluginParam::PluginParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.PluginParam)
}
PluginParam::PluginParam(const PluginParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  root_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_root_dir()) {
    root_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_root_dir(), 
      GetArena());
  }
  config_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_config_file()) {
    config_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_file(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PluginParam)
}

void PluginParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PluginParam_perception_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PluginParam::~PluginParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PluginParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PluginParam::ArenaDtor(void* object) {
  PluginParam* _this = reinterpret_cast< PluginParam* >(object);
  (void)_this;
}
void PluginParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginParam& PluginParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginParam_perception_2eproto.base);
  return *internal_default_instance();
}


void PluginParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.PluginParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      root_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      config_file_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.PluginParam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string root_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_root_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.PluginParam.root_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string config_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_config_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.PluginParam.config_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PluginParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PluginParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string root_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_dir().data(), static_cast<int>(this->_internal_root_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PluginParam.root_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_root_dir(), target);
  }

  // optional string config_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_file().data(), static_cast<int>(this->_internal_config_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PluginParam.config_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_config_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PluginParam)
  return target;
}

size_t PluginParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.PluginParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string root_dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_dir());
    }

    // optional string config_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_config_file());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.PluginParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.PluginParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.PluginParam)
    MergeFrom(*source);
  }
}

void PluginParam::MergeFrom(const PluginParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.PluginParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_root_dir(from._internal_root_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_config_file(from._internal_config_file());
    }
  }
}

void PluginParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.PluginParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginParam::CopyFrom(const PluginParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.PluginParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginParam::IsInitialized() const {
  return true;
}

void PluginParam::InternalSwap(PluginParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  root_dir_.Swap(&other->root_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  config_file_.Swap(&other->config_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetectorParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectorParam>()._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const DetectorParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camera_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
DetectorParam::_Internal::plugin_param(const DetectorParam* msg) {
  return *msg->plugin_param_;
}
DetectorParam::DetectorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.DetectorParam)
}
DetectorParam::DetectorParam(const DetectorParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_camera_name()) {
    camera_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_camera_name(), 
      GetArena());
  }
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.DetectorParam)
}

void DetectorParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectorParam_perception_2eproto.base);
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plugin_param_ = nullptr;
}

DetectorParam::~DetectorParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.DetectorParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectorParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  camera_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plugin_param_;
}

void DetectorParam::ArenaDtor(void* object) {
  DetectorParam* _this = reinterpret_cast< DetectorParam* >(object);
  (void)_this;
}
void DetectorParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectorParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectorParam& DetectorParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectorParam_perception_2eproto.base);
  return *internal_default_instance();
}


void DetectorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.DetectorParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      camera_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(plugin_param_ != nullptr);
      plugin_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectorParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string camera_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DetectorParam.camera_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectorParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.DetectorParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_param(this), target, stream);
  }

  // optional string camera_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DetectorParam.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.DetectorParam)
  return target;
}

size_t DetectorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.DetectorParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string camera_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_name());
    }

    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plugin_param_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectorParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.DetectorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectorParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectorParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.DetectorParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.DetectorParam)
    MergeFrom(*source);
  }
}

void DetectorParam::MergeFrom(const DetectorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.DetectorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_name(from._internal_camera_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
    }
  }
}

void DetectorParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.DetectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorParam::CopyFrom(const DetectorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.DetectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorParam::IsInitialized() const {
  return true;
}

void DetectorParam::InternalSwap(DetectorParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  camera_name_.Swap(&other->camera_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectorParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrackerParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackerParam>()._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const TrackerParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
TrackerParam::_Internal::plugin_param(const TrackerParam* msg) {
  return *msg->plugin_param_;
}
TrackerParam::TrackerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.TrackerParam)
}
TrackerParam::TrackerParam(const TrackerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TrackerParam)
}

void TrackerParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackerParam_perception_2eproto.base);
  plugin_param_ = nullptr;
}

TrackerParam::~TrackerParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TrackerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plugin_param_;
}

void TrackerParam::ArenaDtor(void* object) {
  TrackerParam* _this = reinterpret_cast< TrackerParam* >(object);
  (void)_this;
}
void TrackerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackerParam& TrackerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackerParam_perception_2eproto.base);
  return *internal_default_instance();
}


void TrackerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.TrackerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plugin_param_ != nullptr);
    plugin_param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TrackerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TrackerParam)
  return target;
}

size_t TrackerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.TrackerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.TrackerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.TrackerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.TrackerParam)
    MergeFrom(*source);
  }
}

void TrackerParam::MergeFrom(const TrackerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.TrackerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
}

void TrackerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.TrackerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerParam::CopyFrom(const TrackerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.TrackerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerParam::IsInitialized() const {
  return true;
}

void TrackerParam::InternalSwap(TrackerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransformerParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformerParam>()._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const TransformerParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
TransformerParam::_Internal::plugin_param(const TransformerParam* msg) {
  return *msg->plugin_param_;
}
TransformerParam::TransformerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.TransformerParam)
}
TransformerParam::TransformerParam(const TransformerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TransformerParam)
}

void TransformerParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformerParam_perception_2eproto.base);
  plugin_param_ = nullptr;
}

TransformerParam::~TransformerParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TransformerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransformerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plugin_param_;
}

void TransformerParam::ArenaDtor(void* object) {
  TransformerParam* _this = reinterpret_cast< TransformerParam* >(object);
  (void)_this;
}
void TransformerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformerParam& TransformerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformerParam_perception_2eproto.base);
  return *internal_default_instance();
}


void TransformerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.TransformerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plugin_param_ != nullptr);
    plugin_param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TransformerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TransformerParam)
  return target;
}

size_t TransformerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.TransformerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.TransformerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.TransformerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.TransformerParam)
    MergeFrom(*source);
  }
}

void TransformerParam::MergeFrom(const TransformerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.TransformerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
}

void TransformerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.TransformerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformerParam::CopyFrom(const TransformerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.TransformerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformerParam::IsInitialized() const {
  return true;
}

void TransformerParam::InternalSwap(TransformerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PostprocessorParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PostprocessorParam>()._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const PostprocessorParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
PostprocessorParam::_Internal::plugin_param(const PostprocessorParam* msg) {
  return *msg->plugin_param_;
}
PostprocessorParam::PostprocessorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.PostprocessorParam)
}
PostprocessorParam::PostprocessorParam(const PostprocessorParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PostprocessorParam)
}

void PostprocessorParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostprocessorParam_perception_2eproto.base);
  plugin_param_ = nullptr;
}

PostprocessorParam::~PostprocessorParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PostprocessorParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PostprocessorParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plugin_param_;
}

void PostprocessorParam::ArenaDtor(void* object) {
  PostprocessorParam* _this = reinterpret_cast< PostprocessorParam* >(object);
  (void)_this;
}
void PostprocessorParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostprocessorParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostprocessorParam& PostprocessorParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostprocessorParam_perception_2eproto.base);
  return *internal_default_instance();
}


void PostprocessorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.PostprocessorParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plugin_param_ != nullptr);
    plugin_param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostprocessorParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostprocessorParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PostprocessorParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PostprocessorParam)
  return target;
}

size_t PostprocessorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.PostprocessorParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostprocessorParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.PostprocessorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PostprocessorParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostprocessorParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.PostprocessorParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.PostprocessorParam)
    MergeFrom(*source);
  }
}

void PostprocessorParam::MergeFrom(const PostprocessorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.PostprocessorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
}

void PostprocessorParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.PostprocessorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostprocessorParam::CopyFrom(const PostprocessorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.PostprocessorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostprocessorParam::IsInitialized() const {
  return true;
}

void PostprocessorParam::InternalSwap(PostprocessorParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostprocessorParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeatureParam::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureParam>()._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const FeatureParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
FeatureParam::_Internal::plugin_param(const FeatureParam* msg) {
  return *msg->plugin_param_;
}
FeatureParam::FeatureParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.FeatureParam)
}
FeatureParam::FeatureParam(const FeatureParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.FeatureParam)
}

void FeatureParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureParam_perception_2eproto.base);
  plugin_param_ = nullptr;
}

FeatureParam::~FeatureParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.FeatureParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plugin_param_;
}

void FeatureParam::ArenaDtor(void* object) {
  FeatureParam* _this = reinterpret_cast< FeatureParam* >(object);
  (void)_this;
}
void FeatureParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureParam& FeatureParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureParam_perception_2eproto.base);
  return *internal_default_instance();
}


void FeatureParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.FeatureParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plugin_param_ != nullptr);
    plugin_param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.FeatureParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.FeatureParam)
  return target;
}

size_t FeatureParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.FeatureParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.FeatureParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.FeatureParam)
    MergeFrom(*source);
  }
}

void FeatureParam::MergeFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
}

void FeatureParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureParam::CopyFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureParam::IsInitialized() const {
  return true;
}

void FeatureParam::InternalSwap(FeatureParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DebugParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugParam>()._has_bits_);
  static void set_has_detection_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tracked_detection_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_out_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_detect_feature_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lane_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera2world_out_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_calibration_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DebugParam::DebugParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.DebugParam)
}
DebugParam::DebugParam(const DebugParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detection_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_detection_out_dir()) {
    detection_out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detection_out_dir(), 
      GetArena());
  }
  tracked_detection_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tracked_detection_out_dir()) {
    tracked_detection_out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tracked_detection_out_dir(), 
      GetArena());
  }
  track_out_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_track_out_file()) {
    track_out_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_out_file(), 
      GetArena());
  }
  detect_feature_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_detect_feature_dir()) {
    detect_feature_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detect_feature_dir(), 
      GetArena());
  }
  lane_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lane_out_dir()) {
    lane_out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_out_dir(), 
      GetArena());
  }
  camera2world_out_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_camera2world_out_file()) {
    camera2world_out_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_camera2world_out_file(), 
      GetArena());
  }
  calibration_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_calibration_out_dir()) {
    calibration_out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_calibration_out_dir(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.DebugParam)
}

void DebugParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugParam_perception_2eproto.base);
  detection_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracked_detection_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_out_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detect_feature_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera2world_out_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calibration_out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DebugParam::~DebugParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.DebugParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  detection_out_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracked_detection_out_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_out_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detect_feature_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_out_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera2world_out_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calibration_out_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugParam::ArenaDtor(void* object) {
  DebugParam* _this = reinterpret_cast< DebugParam* >(object);
  (void)_this;
}
void DebugParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugParam& DebugParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugParam_perception_2eproto.base);
  return *internal_default_instance();
}


void DebugParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.DebugParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      detection_out_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tracked_detection_out_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      track_out_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      detect_feature_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      lane_out_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      camera2world_out_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      calibration_out_dir_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string detection_out_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_detection_out_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.detection_out_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tracked_detection_out_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tracked_detection_out_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.tracked_detection_out_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string track_out_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_track_out_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.track_out_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string detect_feature_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_detect_feature_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.detect_feature_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lane_out_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_lane_out_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.lane_out_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string camera2world_out_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_camera2world_out_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.camera2world_out_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string calibration_out_dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_calibration_out_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.calibration_out_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.DebugParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string detection_out_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detection_out_dir().data(), static_cast<int>(this->_internal_detection_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.detection_out_dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detection_out_dir(), target);
  }

  // optional string tracked_detection_out_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tracked_detection_out_dir().data(), static_cast<int>(this->_internal_tracked_detection_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.tracked_detection_out_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tracked_detection_out_dir(), target);
  }

  // optional string track_out_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_out_file().data(), static_cast<int>(this->_internal_track_out_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.track_out_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_track_out_file(), target);
  }

  // optional string detect_feature_dir = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detect_feature_dir().data(), static_cast<int>(this->_internal_detect_feature_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.detect_feature_dir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_detect_feature_dir(), target);
  }

  // optional string lane_out_dir = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_out_dir().data(), static_cast<int>(this->_internal_lane_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.lane_out_dir");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lane_out_dir(), target);
  }

  // optional string camera2world_out_file = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera2world_out_file().data(), static_cast<int>(this->_internal_camera2world_out_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.camera2world_out_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_camera2world_out_file(), target);
  }

  // optional string calibration_out_dir = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibration_out_dir().data(), static_cast<int>(this->_internal_calibration_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.calibration_out_dir");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_calibration_out_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.DebugParam)
  return target;
}

size_t DebugParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.DebugParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string detection_out_dir = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detection_out_dir());
    }

    // optional string tracked_detection_out_dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tracked_detection_out_dir());
    }

    // optional string track_out_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_track_out_file());
    }

    // optional string detect_feature_dir = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detect_feature_dir());
    }

    // optional string lane_out_dir = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_out_dir());
    }

    // optional string camera2world_out_file = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera2world_out_file());
    }

    // optional string calibration_out_dir = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibration_out_dir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.DebugParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.DebugParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.DebugParam)
    MergeFrom(*source);
  }
}

void DebugParam::MergeFrom(const DebugParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.DebugParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_detection_out_dir(from._internal_detection_out_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tracked_detection_out_dir(from._internal_tracked_detection_out_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_track_out_file(from._internal_track_out_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_detect_feature_dir(from._internal_detect_feature_dir());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_lane_out_dir(from._internal_lane_out_dir());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_camera2world_out_file(from._internal_camera2world_out_file());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_calibration_out_dir(from._internal_calibration_out_dir());
    }
  }
}

void DebugParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.DebugParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugParam::CopyFrom(const DebugParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.DebugParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugParam::IsInitialized() const {
  return true;
}

void DebugParam::InternalSwap(DebugParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  detection_out_dir_.Swap(&other->detection_out_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tracked_detection_out_dir_.Swap(&other->tracked_detection_out_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  track_out_file_.Swap(&other->track_out_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detect_feature_dir_.Swap(&other->detect_feature_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lane_out_dir_.Swap(&other->lane_out_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera2world_out_file_.Swap(&other->camera2world_out_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  calibration_out_dir_.Swap(&other->calibration_out_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LanePerceptionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<LanePerceptionParam>()._has_bits_);
  static const ::apollo::perception::camera::app::DetectorParam& lane_detector_param(const LanePerceptionParam* msg);
  static void set_has_lane_detector_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::app::PluginParam& lane_postprocessor_param(const LanePerceptionParam* msg);
  static void set_has_lane_postprocessor_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::app::PluginParam& lane_tracker_param(const LanePerceptionParam* msg);
  static void set_has_lane_tracker_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::camera::app::DetectorParam&
LanePerceptionParam::_Internal::lane_detector_param(const LanePerceptionParam* msg) {
  return *msg->lane_detector_param_;
}
const ::apollo::perception::camera::app::PluginParam&
LanePerceptionParam::_Internal::lane_postprocessor_param(const LanePerceptionParam* msg) {
  return *msg->lane_postprocessor_param_;
}
const ::apollo::perception::camera::app::PluginParam&
LanePerceptionParam::_Internal::lane_tracker_param(const LanePerceptionParam* msg) {
  return *msg->lane_tracker_param_;
}
LanePerceptionParam::LanePerceptionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.LanePerceptionParam)
}
LanePerceptionParam::LanePerceptionParam(const LanePerceptionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_detector_param()) {
    lane_detector_param_ = new ::apollo::perception::camera::app::DetectorParam(*from.lane_detector_param_);
  } else {
    lane_detector_param_ = nullptr;
  }
  if (from._internal_has_lane_postprocessor_param()) {
    lane_postprocessor_param_ = new ::apollo::perception::camera::app::PluginParam(*from.lane_postprocessor_param_);
  } else {
    lane_postprocessor_param_ = nullptr;
  }
  if (from._internal_has_lane_tracker_param()) {
    lane_tracker_param_ = new ::apollo::perception::camera::app::PluginParam(*from.lane_tracker_param_);
  } else {
    lane_tracker_param_ = nullptr;
  }
  gpu_id_ = from.gpu_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.LanePerceptionParam)
}

void LanePerceptionParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LanePerceptionParam_perception_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lane_detector_param_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gpu_id_) -
      reinterpret_cast<char*>(&lane_detector_param_)) + sizeof(gpu_id_));
}

LanePerceptionParam::~LanePerceptionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.LanePerceptionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LanePerceptionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lane_detector_param_;
  if (this != internal_default_instance()) delete lane_postprocessor_param_;
  if (this != internal_default_instance()) delete lane_tracker_param_;
}

void LanePerceptionParam::ArenaDtor(void* object) {
  LanePerceptionParam* _this = reinterpret_cast< LanePerceptionParam* >(object);
  (void)_this;
}
void LanePerceptionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LanePerceptionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LanePerceptionParam& LanePerceptionParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LanePerceptionParam_perception_2eproto.base);
  return *internal_default_instance();
}


void LanePerceptionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.LanePerceptionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lane_detector_param_ != nullptr);
      lane_detector_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_postprocessor_param_ != nullptr);
      lane_postprocessor_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lane_tracker_param_ != nullptr);
      lane_tracker_param_->Clear();
    }
  }
  gpu_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanePerceptionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_detector_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_postprocessor_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_tracker_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gpu_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LanePerceptionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.LanePerceptionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lane_detector_param(this), target, stream);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lane_postprocessor_param(this), target, stream);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lane_tracker_param(this), target, stream);
  }

  // optional int32 gpu_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gpu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.LanePerceptionParam)
  return target;
}

size_t LanePerceptionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.LanePerceptionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_detector_param_);
    }

    // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_postprocessor_param_);
    }

    // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_tracker_param_);
    }

    // optional int32 gpu_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpu_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LanePerceptionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.LanePerceptionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LanePerceptionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LanePerceptionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.LanePerceptionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.LanePerceptionParam)
    MergeFrom(*source);
  }
}

void LanePerceptionParam::MergeFrom(const LanePerceptionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.LanePerceptionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lane_detector_param()->::apollo::perception::camera::app::DetectorParam::MergeFrom(from._internal_lane_detector_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_postprocessor_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_lane_postprocessor_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_tracker_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_lane_tracker_param());
    }
    if (cached_has_bits & 0x00000008u) {
      gpu_id_ = from.gpu_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LanePerceptionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.LanePerceptionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanePerceptionParam::CopyFrom(const LanePerceptionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.LanePerceptionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePerceptionParam::IsInitialized() const {
  return true;
}

void LanePerceptionParam::InternalSwap(LanePerceptionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LanePerceptionParam, gpu_id_)
      + sizeof(LanePerceptionParam::gpu_id_)
      - PROTOBUF_FIELD_OFFSET(LanePerceptionParam, lane_detector_param_)>(
          reinterpret_cast<char*>(&lane_detector_param_),
          reinterpret_cast<char*>(&other->lane_detector_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LanePerceptionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CalibrationServiceParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CalibrationServiceParam>()._has_bits_);
  static void set_has_calibrator_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const CalibrationServiceParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
CalibrationServiceParam::_Internal::plugin_param(const CalibrationServiceParam* msg) {
  return *msg->plugin_param_;
}
CalibrationServiceParam::CalibrationServiceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.CalibrationServiceParam)
}
CalibrationServiceParam::CalibrationServiceParam(const CalibrationServiceParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  calibrator_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_calibrator_method()) {
    calibrator_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_calibrator_method(), 
      GetArena());
  }
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.CalibrationServiceParam)
}

void CalibrationServiceParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibrationServiceParam_perception_2eproto.base);
  calibrator_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plugin_param_ = nullptr;
}

CalibrationServiceParam::~CalibrationServiceParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.CalibrationServiceParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibrationServiceParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  calibrator_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plugin_param_;
}

void CalibrationServiceParam::ArenaDtor(void* object) {
  CalibrationServiceParam* _this = reinterpret_cast< CalibrationServiceParam* >(object);
  (void)_this;
}
void CalibrationServiceParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibrationServiceParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationServiceParam& CalibrationServiceParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibrationServiceParam_perception_2eproto.base);
  return *internal_default_instance();
}


void CalibrationServiceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.CalibrationServiceParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      calibrator_method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(plugin_param_ != nullptr);
      plugin_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibrationServiceParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string calibrator_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_calibrator_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.CalibrationServiceParam.calibrator_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationServiceParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.CalibrationServiceParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string calibrator_method = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibrator_method().data(), static_cast<int>(this->_internal_calibrator_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.CalibrationServiceParam.calibrator_method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_calibrator_method(), target);
  }

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::plugin_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.CalibrationServiceParam)
  return target;
}

size_t CalibrationServiceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.CalibrationServiceParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string calibrator_method = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibrator_method());
    }

    // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plugin_param_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationServiceParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.CalibrationServiceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationServiceParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationServiceParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.CalibrationServiceParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.CalibrationServiceParam)
    MergeFrom(*source);
  }
}

void CalibrationServiceParam::MergeFrom(const CalibrationServiceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.CalibrationServiceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_calibrator_method(from._internal_calibrator_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
    }
  }
}

void CalibrationServiceParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.CalibrationServiceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationServiceParam::CopyFrom(const CalibrationServiceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.CalibrationServiceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationServiceParam::IsInitialized() const {
  return true;
}

void CalibrationServiceParam::InternalSwap(CalibrationServiceParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  calibrator_method_.Swap(&other->calibrator_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationServiceParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectTemplateParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectTemplateParam>()._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const ObjectTemplateParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
ObjectTemplateParam::_Internal::plugin_param(const ObjectTemplateParam* msg) {
  return *msg->plugin_param_;
}
ObjectTemplateParam::ObjectTemplateParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.ObjectTemplateParam)
}
ObjectTemplateParam::ObjectTemplateParam(const ObjectTemplateParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.ObjectTemplateParam)
}

void ObjectTemplateParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectTemplateParam_perception_2eproto.base);
  plugin_param_ = nullptr;
}

ObjectTemplateParam::~ObjectTemplateParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.ObjectTemplateParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectTemplateParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plugin_param_;
}

void ObjectTemplateParam::ArenaDtor(void* object) {
  ObjectTemplateParam* _this = reinterpret_cast< ObjectTemplateParam* >(object);
  (void)_this;
}
void ObjectTemplateParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectTemplateParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectTemplateParam& ObjectTemplateParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectTemplateParam_perception_2eproto.base);
  return *internal_default_instance();
}


void ObjectTemplateParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.ObjectTemplateParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plugin_param_ != nullptr);
    plugin_param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectTemplateParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTemplateParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.ObjectTemplateParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.ObjectTemplateParam)
  return target;
}

size_t ObjectTemplateParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.ObjectTemplateParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectTemplateParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.ObjectTemplateParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectTemplateParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectTemplateParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.ObjectTemplateParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.ObjectTemplateParam)
    MergeFrom(*source);
  }
}

void ObjectTemplateParam::MergeFrom(const ObjectTemplateParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.ObjectTemplateParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
}

void ObjectTemplateParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.ObjectTemplateParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTemplateParam::CopyFrom(const ObjectTemplateParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.ObjectTemplateParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTemplateParam::IsInitialized() const {
  return true;
}

void ObjectTemplateParam::InternalSwap(ObjectTemplateParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTemplateParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrafficLightParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightParam>()._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const TrafficLightParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
TrafficLightParam::_Internal::plugin_param(const TrafficLightParam* msg) {
  return *msg->plugin_param_;
}
TrafficLightParam::TrafficLightParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.TrafficLightParam)
}
TrafficLightParam::TrafficLightParam(const TrafficLightParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from.plugin_param_);
  } else {
    plugin_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TrafficLightParam)
}

void TrafficLightParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightParam_perception_2eproto.base);
  plugin_param_ = nullptr;
}

TrafficLightParam::~TrafficLightParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TrafficLightParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficLightParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plugin_param_;
}

void TrafficLightParam::ArenaDtor(void* object) {
  TrafficLightParam* _this = reinterpret_cast< TrafficLightParam* >(object);
  (void)_this;
}
void TrafficLightParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLightParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightParam& TrafficLightParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightParam_perception_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.TrafficLightParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plugin_param_ != nullptr);
    plugin_param_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TrafficLightParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TrafficLightParam)
  return target;
}

size_t TrafficLightParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.TrafficLightParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.TrafficLightParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.TrafficLightParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.TrafficLightParam)
    MergeFrom(*source);
  }
}

void TrafficLightParam::MergeFrom(const TrafficLightParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.TrafficLightParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
}

void TrafficLightParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.TrafficLightParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightParam::CopyFrom(const TrafficLightParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.TrafficLightParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightParam::IsInitialized() const {
  return true;
}

void TrafficLightParam::InternalSwap(TrafficLightParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_param_, other->plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerceptionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionParam>()._has_bits_);
  static const ::apollo::perception::camera::app::TrackerParam& tracker_param(const PerceptionParam* msg);
  static void set_has_tracker_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::app::TransformerParam& transformer_param(const PerceptionParam* msg);
  static void set_has_transformer_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::camera::app::PostprocessorParam& postprocessor_param(const PerceptionParam* msg);
  static void set_has_postprocessor_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_camera_intrinsics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::app::FeatureParam& feature_param(const PerceptionParam* msg);
  static void set_has_feature_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::camera::app::CalibrationServiceParam& calibration_service_param(const PerceptionParam* msg);
  static void set_has_calibration_service_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::camera::app::DebugParam& debug_param(const PerceptionParam* msg);
  static void set_has_debug_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::camera::app::ObjectTemplateParam& object_template_param(const PerceptionParam* msg);
  static void set_has_object_template_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::perception::camera::app::TrafficLightParam& traffic_light_param(const PerceptionParam* msg);
  static void set_has_traffic_light_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::apollo::perception::camera::app::TrackerParam&
PerceptionParam::_Internal::tracker_param(const PerceptionParam* msg) {
  return *msg->tracker_param_;
}
const ::apollo::perception::camera::app::TransformerParam&
PerceptionParam::_Internal::transformer_param(const PerceptionParam* msg) {
  return *msg->transformer_param_;
}
const ::apollo::perception::camera::app::PostprocessorParam&
PerceptionParam::_Internal::postprocessor_param(const PerceptionParam* msg) {
  return *msg->postprocessor_param_;
}
const ::apollo::perception::camera::app::FeatureParam&
PerceptionParam::_Internal::feature_param(const PerceptionParam* msg) {
  return *msg->feature_param_;
}
const ::apollo::perception::camera::app::CalibrationServiceParam&
PerceptionParam::_Internal::calibration_service_param(const PerceptionParam* msg) {
  return *msg->calibration_service_param_;
}
const ::apollo::perception::camera::app::DebugParam&
PerceptionParam::_Internal::debug_param(const PerceptionParam* msg) {
  return *msg->debug_param_;
}
const ::apollo::perception::camera::app::ObjectTemplateParam&
PerceptionParam::_Internal::object_template_param(const PerceptionParam* msg) {
  return *msg->object_template_param_;
}
const ::apollo::perception::camera::app::TrafficLightParam&
PerceptionParam::_Internal::traffic_light_param(const PerceptionParam* msg) {
  return *msg->traffic_light_param_;
}
PerceptionParam::PerceptionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detector_param_(arena),
  lane_param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.PerceptionParam)
}
PerceptionParam::PerceptionParam(const PerceptionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      detector_param_(from.detector_param_),
      lane_param_(from.lane_param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_intrinsics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_camera_intrinsics()) {
    camera_intrinsics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_camera_intrinsics(), 
      GetArena());
  }
  if (from._internal_has_tracker_param()) {
    tracker_param_ = new ::apollo::perception::camera::app::TrackerParam(*from.tracker_param_);
  } else {
    tracker_param_ = nullptr;
  }
  if (from._internal_has_transformer_param()) {
    transformer_param_ = new ::apollo::perception::camera::app::TransformerParam(*from.transformer_param_);
  } else {
    transformer_param_ = nullptr;
  }
  if (from._internal_has_postprocessor_param()) {
    postprocessor_param_ = new ::apollo::perception::camera::app::PostprocessorParam(*from.postprocessor_param_);
  } else {
    postprocessor_param_ = nullptr;
  }
  if (from._internal_has_feature_param()) {
    feature_param_ = new ::apollo::perception::camera::app::FeatureParam(*from.feature_param_);
  } else {
    feature_param_ = nullptr;
  }
  if (from._internal_has_calibration_service_param()) {
    calibration_service_param_ = new ::apollo::perception::camera::app::CalibrationServiceParam(*from.calibration_service_param_);
  } else {
    calibration_service_param_ = nullptr;
  }
  if (from._internal_has_debug_param()) {
    debug_param_ = new ::apollo::perception::camera::app::DebugParam(*from.debug_param_);
  } else {
    debug_param_ = nullptr;
  }
  if (from._internal_has_object_template_param()) {
    object_template_param_ = new ::apollo::perception::camera::app::ObjectTemplateParam(*from.object_template_param_);
  } else {
    object_template_param_ = nullptr;
  }
  if (from._internal_has_traffic_light_param()) {
    traffic_light_param_ = new ::apollo::perception::camera::app::TrafficLightParam(*from.traffic_light_param_);
  } else {
    traffic_light_param_ = nullptr;
  }
  gpu_id_ = from.gpu_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PerceptionParam)
}

void PerceptionParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerceptionParam_perception_2eproto.base);
  camera_intrinsics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tracker_param_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gpu_id_) -
      reinterpret_cast<char*>(&tracker_param_)) + sizeof(gpu_id_));
}

PerceptionParam::~PerceptionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PerceptionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerceptionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  camera_intrinsics_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tracker_param_;
  if (this != internal_default_instance()) delete transformer_param_;
  if (this != internal_default_instance()) delete postprocessor_param_;
  if (this != internal_default_instance()) delete feature_param_;
  if (this != internal_default_instance()) delete calibration_service_param_;
  if (this != internal_default_instance()) delete debug_param_;
  if (this != internal_default_instance()) delete object_template_param_;
  if (this != internal_default_instance()) delete traffic_light_param_;
}

void PerceptionParam::ArenaDtor(void* object) {
  PerceptionParam* _this = reinterpret_cast< PerceptionParam* >(object);
  (void)_this;
}
void PerceptionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerceptionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceptionParam& PerceptionParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerceptionParam_perception_2eproto.base);
  return *internal_default_instance();
}


void PerceptionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.PerceptionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detector_param_.Clear();
  lane_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      camera_intrinsics_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tracker_param_ != nullptr);
      tracker_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transformer_param_ != nullptr);
      transformer_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(postprocessor_param_ != nullptr);
      postprocessor_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(feature_param_ != nullptr);
      feature_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(calibration_service_param_ != nullptr);
      calibration_service_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(debug_param_ != nullptr);
      debug_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(object_template_param_ != nullptr);
      object_template_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(traffic_light_param_ != nullptr);
    traffic_light_param_->Clear();
  }
  gpu_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detector_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracker_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessor_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gpu_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string camera_intrinsics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_camera_intrinsics();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.app.PerceptionParam.camera_intrinsics");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_calibration_service_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_template_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.TrafficLightParam traffic_light_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceptionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PerceptionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detector_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_detector_param(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tracker_param(this), target, stream);
  }

  // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transformer_param(this), target, stream);
  }

  // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::postprocessor_param(this), target, stream);
  }

  // optional int32 gpu_id = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_gpu_id(), target);
  }

  // optional string camera_intrinsics = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_intrinsics().data(), static_cast<int>(this->_internal_camera_intrinsics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PerceptionParam.camera_intrinsics");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_camera_intrinsics(), target);
  }

  // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::feature_param(this), target, stream);
  }

  // repeated .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_lane_param(i), target, stream);
  }

  // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::calibration_service_param(this), target, stream);
  }

  // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::debug_param(this), target, stream);
  }

  // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::object_template_param(this), target, stream);
  }

  // optional .apollo.perception.camera.app.TrafficLightParam traffic_light_param = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::traffic_light_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PerceptionParam)
  return target;
}

size_t PerceptionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.PerceptionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  total_size += 1UL * this->_internal_detector_param_size();
  for (const auto& msg : this->detector_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  total_size += 1UL * this->_internal_lane_param_size();
  for (const auto& msg : this->lane_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string camera_intrinsics = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_intrinsics());
    }

    // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracker_param_);
    }

    // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transformer_param_);
    }

    // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *postprocessor_param_);
    }

    // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_param_);
    }

    // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calibration_service_param_);
    }

    // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_param_);
    }

    // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_template_param_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.perception.camera.app.TrafficLightParam traffic_light_param = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_light_param_);
    }

    // optional int32 gpu_id = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpu_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.app.PerceptionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerceptionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.app.PerceptionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.app.PerceptionParam)
    MergeFrom(*source);
  }
}

void PerceptionParam::MergeFrom(const PerceptionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.PerceptionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detector_param_.MergeFrom(from.detector_param_);
  lane_param_.MergeFrom(from.lane_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_intrinsics(from._internal_camera_intrinsics());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tracker_param()->::apollo::perception::camera::app::TrackerParam::MergeFrom(from._internal_tracker_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transformer_param()->::apollo::perception::camera::app::TransformerParam::MergeFrom(from._internal_transformer_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_postprocessor_param()->::apollo::perception::camera::app::PostprocessorParam::MergeFrom(from._internal_postprocessor_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_feature_param()->::apollo::perception::camera::app::FeatureParam::MergeFrom(from._internal_feature_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_calibration_service_param()->::apollo::perception::camera::app::CalibrationServiceParam::MergeFrom(from._internal_calibration_service_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_debug_param()->::apollo::perception::camera::app::DebugParam::MergeFrom(from._internal_debug_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_object_template_param()->::apollo::perception::camera::app::ObjectTemplateParam::MergeFrom(from._internal_object_template_param());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_traffic_light_param()->::apollo::perception::camera::app::TrafficLightParam::MergeFrom(from._internal_traffic_light_param());
    }
    if (cached_has_bits & 0x00000200u) {
      gpu_id_ = from.gpu_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.app.PerceptionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionParam::CopyFrom(const PerceptionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.PerceptionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionParam::IsInitialized() const {
  return true;
}

void PerceptionParam::InternalSwap(PerceptionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  detector_param_.InternalSwap(&other->detector_param_);
  lane_param_.InternalSwap(&other->lane_param_);
  camera_intrinsics_.Swap(&other->camera_intrinsics_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionParam, gpu_id_)
      + sizeof(PerceptionParam::gpu_id_)
      - PROTOBUF_FIELD_OFFSET(PerceptionParam, tracker_param_)>(
          reinterpret_cast<char*>(&tracker_param_),
          reinterpret_cast<char*>(&other->tracker_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::PluginParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::PluginParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::PluginParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::DetectorParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::DetectorParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::DetectorParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::TrackerParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::TrackerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::TrackerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::TransformerParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::TransformerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::TransformerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::PostprocessorParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::PostprocessorParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::PostprocessorParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::FeatureParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::FeatureParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::FeatureParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::DebugParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::DebugParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::DebugParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::LanePerceptionParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::LanePerceptionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::LanePerceptionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::CalibrationServiceParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::CalibrationServiceParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::CalibrationServiceParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::ObjectTemplateParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::ObjectTemplateParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::ObjectTemplateParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::TrafficLightParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::TrafficLightParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::TrafficLightParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::PerceptionParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::app::PerceptionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::PerceptionParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
