// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_obstacle.proto

#include "perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPoint_pnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBox2D_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIPVInfo_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugMessage_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarker_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMarkers_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightStatus_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PerceptionObstacle_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorMeasurement_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_V2XInformation_perception_5fobstacle_2eproto;
namespace apollo {
namespace perception {
class BBox2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBox2D> _instance;
} _BBox2D_default_instance_;
class LightStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightStatus> _instance;
} _LightStatus_default_instance_;
class V2XInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<V2XInformation> _instance;
} _V2XInformation_default_instance_;
class SensorMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorMeasurement> _instance;
} _SensorMeasurement_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class DebugMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugMessage> _instance;
} _DebugMessage_default_instance_;
class PerceptionObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerceptionObstacle> _instance;
} _PerceptionObstacle_default_instance_;
class LaneMarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarker> _instance;
} _LaneMarker_default_instance_;
class LaneMarkersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarkers> _instance;
} _LaneMarkers_default_instance_;
class CIPVInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIPVInfo> _instance;
} _CIPVInfo_default_instance_;
class PerceptionObstaclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerceptionObstacles> _instance;
} _PerceptionObstacles_default_instance_;
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_BBox2D_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_BBox2D_default_instance_;
    new (ptr) ::apollo::perception::BBox2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBox2D_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BBox2D_perception_5fobstacle_2eproto}, {}};

static void InitDefaultsscc_info_CIPVInfo_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_CIPVInfo_default_instance_;
    new (ptr) ::apollo::perception::CIPVInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIPVInfo_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIPVInfo_perception_5fobstacle_2eproto}, {}};

static void InitDefaultsscc_info_DebugMessage_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_DebugMessage_default_instance_;
    new (ptr) ::apollo::perception::DebugMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugMessage_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebugMessage_perception_5fobstacle_2eproto}, {
      &scc_info_Trajectory_perception_5fobstacle_2eproto.base,}};

static void InitDefaultsscc_info_LaneMarker_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_LaneMarker_default_instance_;
    new (ptr) ::apollo::perception::LaneMarker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarker_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneMarker_perception_5fobstacle_2eproto}, {}};

static void InitDefaultsscc_info_LaneMarkers_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_LaneMarkers_default_instance_;
    new (ptr) ::apollo::perception::LaneMarkers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMarkers_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaneMarkers_perception_5fobstacle_2eproto}, {
      &scc_info_LaneMarker_perception_5fobstacle_2eproto.base,}};

static void InitDefaultsscc_info_LightStatus_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_LightStatus_default_instance_;
    new (ptr) ::apollo::perception::LightStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightStatus_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LightStatus_perception_5fobstacle_2eproto}, {}};

static void InitDefaultsscc_info_PerceptionObstacle_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_PerceptionObstacle_default_instance_;
    new (ptr) ::apollo::perception::PerceptionObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PerceptionObstacle_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_PerceptionObstacle_perception_5fobstacle_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_BBox2D_perception_5fobstacle_2eproto.base,
      &scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base,
      &scc_info_LightStatus_perception_5fobstacle_2eproto.base,
      &scc_info_DebugMessage_perception_5fobstacle_2eproto.base,
      &scc_info_V2XInformation_perception_5fobstacle_2eproto.base,}};

static void InitDefaultsscc_info_PerceptionObstacles_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_PerceptionObstacles_default_instance_;
    new (ptr) ::apollo::perception::PerceptionObstacles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PerceptionObstacles_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PerceptionObstacles_perception_5fobstacle_2eproto}, {
      &scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base,
      &scc_info_Header_header_2eproto.base,
      &scc_info_LaneMarkers_perception_5fobstacle_2eproto.base,
      &scc_info_CIPVInfo_perception_5fobstacle_2eproto.base,}};

static void InitDefaultsscc_info_SensorMeasurement_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_SensorMeasurement_default_instance_;
    new (ptr) ::apollo::perception::SensorMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorMeasurement_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SensorMeasurement_perception_5fobstacle_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_BBox2D_perception_5fobstacle_2eproto.base,}};

static void InitDefaultsscc_info_Trajectory_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_Trajectory_default_instance_;
    new (ptr) ::apollo::perception::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trajectory_perception_5fobstacle_2eproto}, {
      &scc_info_TrajectoryPoint_pnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_V2XInformation_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_V2XInformation_default_instance_;
    new (ptr) ::apollo::perception::V2XInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_V2XInformation_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_V2XInformation_perception_5fobstacle_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_perception_5fobstacle_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_perception_5fobstacle_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_perception_5fobstacle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_perception_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::BBox2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::BBox2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::BBox2D, xmin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::BBox2D, ymin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::BBox2D, xmax_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::BBox2D, ymax_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, brake_visible_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, brake_switch_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, left_turn_visible_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, left_turn_switch_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, right_turn_visible_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LightStatus, right_turn_switch_on_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::V2XInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::V2XInformation, v2x_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeasurement, box_),
  0,
  6,
  1,
  4,
  5,
  8,
  9,
  2,
  7,
  11,
  10,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Trajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Trajectory, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Trajectory, trajectory_point_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::DebugMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::DebugMessage, trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, point_cloud_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, confidence_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, drops_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, anchor_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, bbox2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, measurements_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, height_above_ground_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, position_covariance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, velocity_covariance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, acceleration_covariance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, light_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, v2x_info_),
  10,
  0,
  8,
  1,
  9,
  12,
  13,
  ~0u,
  14,
  11,
  15,
  ~0u,
  16,
  17,
  ~0u,
  2,
  3,
  4,
  18,
  ~0u,
  20,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  19,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, lane_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, model_degree_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, c0_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, c1_heading_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, c2_curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, c3_curvature_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, view_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, longitude_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, longitude_end_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, left_lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, right_lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, next_left_lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, next_right_lane_marker_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, cipv_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, potential_cipv_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, cipv_info_),
  ~0u,
  0,
  3,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::perception::BBox2D)},
  { 13, 24, sizeof(::apollo::perception::LightStatus)},
  { 30, -1, sizeof(::apollo::perception::V2XInformation)},
  { 36, 53, sizeof(::apollo::perception::SensorMeasurement)},
  { 65, 72, sizeof(::apollo::perception::Trajectory)},
  { 74, -1, sizeof(::apollo::perception::DebugMessage)},
  { 80, 113, sizeof(::apollo::perception::PerceptionObstacle)},
  { 141, 156, sizeof(::apollo::perception::LaneMarker)},
  { 166, 175, sizeof(::apollo::perception::LaneMarkers)},
  { 179, 186, sizeof(::apollo::perception::CIPVInfo)},
  { 188, 198, sizeof(::apollo::perception::PerceptionObstacles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_BBox2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_LightStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_V2XInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_SensorMeasurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_DebugMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_PerceptionObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_LaneMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_LaneMarkers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_CIPVInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_PerceptionObstacles_default_instance_),
};

const char descriptor_table_protodef_perception_5fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031perception_obstacle.proto\022\021apollo.perc"
  "eption\032\020error_code.proto\032\016geometry.proto"
  "\032\014header.proto\032\017pnc_point.proto\032\016map_lan"
  "e.proto\"@\n\006BBox2D\022\014\n\004xmin\030\001 \001(\001\022\014\n\004ymin\030"
  "\002 \001(\001\022\014\n\004xmax\030\003 \001(\001\022\014\n\004ymax\030\004 \001(\001\"\257\001\n\013Li"
  "ghtStatus\022\025\n\rbrake_visible\030\001 \001(\001\022\027\n\017brak"
  "e_switch_on\030\002 \001(\001\022\031\n\021left_turn_visible\030\003"
  " \001(\001\022\033\n\023left_turn_switch_on\030\004 \001(\001\022\032\n\022rig"
  "ht_turn_visible\030\005 \001(\001\022\034\n\024right_turn_swit"
  "ch_on\030\006 \001(\001\"\203\001\n\016V2XInformation\022;\n\010v2x_ty"
  "pe\030\001 \003(\0162).apollo.perception.V2XInformat"
  "ion.V2XType\"4\n\007V2XType\022\010\n\004NONE\020\000\022\017\n\013ZOMB"
  "IES_CAR\020\001\022\016\n\nBLIND_ZONE\020\002\"\372\002\n\021SensorMeas"
  "urement\022\021\n\tsensor_id\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022("
  "\n\010position\030\003 \001(\0132\026.apollo.common.Point3D"
  "\022\r\n\005theta\030\004 \001(\001\022\016\n\006length\030\005 \001(\001\022\r\n\005width"
  "\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022(\n\010velocity\030\010 \001(\013"
  "2\026.apollo.common.Point3D\0228\n\004type\030\t \001(\0162*"
  ".apollo.perception.PerceptionObstacle.Ty"
  "pe\022\?\n\010sub_type\030\n \001(\0162-.apollo.perception"
  ".PerceptionObstacle.SubType\022\021\n\ttimestamp"
  "\030\013 \001(\001\022&\n\003box\030\014 \001(\0132\031.apollo.perception."
  "BBox2D\"[\n\nTrajectory\022\023\n\013probability\030\001 \001("
  "\001\0228\n\020trajectory_point\030\002 \003(\0132\036.apollo.com"
  "mon.TrajectoryPoint\"A\n\014DebugMessage\0221\n\nt"
  "rajectory\030\001 \003(\0132\035.apollo.perception.Traj"
  "ectory\"\251\014\n\022PerceptionObstacle\022\n\n\002id\030\001 \001("
  "\005\022(\n\010position\030\002 \001(\0132\026.apollo.common.Poin"
  "t3D\022\r\n\005theta\030\003 \001(\001\022(\n\010velocity\030\004 \001(\0132\026.a"
  "pollo.common.Point3D\022\016\n\006length\030\005 \001(\001\022\r\n\005"
  "width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022-\n\rpolygon_p"
  "oint\030\010 \003(\0132\026.apollo.common.Point3D\022\025\n\rtr"
  "acking_time\030\t \001(\001\0228\n\004type\030\n \001(\0162*.apollo"
  ".perception.PerceptionObstacle.Type\022\021\n\tt"
  "imestamp\030\013 \001(\001\022\027\n\013point_cloud\030\014 \003(\001B\002\020\001\022"
  "\026\n\nconfidence\030\r \001(\001B\002\030\001\022Q\n\017confidence_ty"
  "pe\030\016 \001(\01624.apollo.perception.PerceptionO"
  "bstacle.ConfidenceTypeB\002\030\001\022)\n\005drops\030\017 \003("
  "\0132\026.apollo.common.Point3DB\002\030\001\022,\n\014acceler"
  "ation\030\020 \001(\0132\026.apollo.common.Point3D\022,\n\014a"
  "nchor_point\030\021 \001(\0132\026.apollo.common.Point3"
  "D\022)\n\006bbox2d\030\022 \001(\0132\031.apollo.perception.BB"
  "ox2D\022\?\n\010sub_type\030\023 \001(\0162-.apollo.percepti"
  "on.PerceptionObstacle.SubType\022:\n\014measure"
  "ments\030\024 \003(\0132$.apollo.perception.SensorMe"
  "asurement\022 \n\023height_above_ground\030\025 \001(\001:\003"
  "nan\022\037\n\023position_covariance\030\026 \003(\001B\002\020\001\022\037\n\023"
  "velocity_covariance\030\027 \003(\001B\002\020\001\022#\n\027acceler"
  "ation_covariance\030\030 \003(\001B\002\020\001\0224\n\014light_stat"
  "us\030\031 \001(\0132\036.apollo.perception.LightStatus"
  "\022,\n\003msg\030\032 \001(\0132\037.apollo.perception.DebugM"
  "essage\022J\n\006source\030\033 \001(\0162,.apollo.percepti"
  "on.PerceptionObstacle.Source:\014HOST_VEHIC"
  "LE\0223\n\010v2x_info\030\034 \001(\0132!.apollo.perception"
  ".V2XInformation\"i\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017"
  "UNKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002"
  "\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE"
  "\020\005\"R\n\016ConfidenceType\022\026\n\022CONFIDENCE_UNKNO"
  "WN\020\000\022\022\n\016CONFIDENCE_CNN\020\001\022\024\n\020CONFIDENCE_R"
  "ADAR\020\002\"\334\001\n\007SubType\022\016\n\nST_UNKNOWN\020\000\022\026\n\022ST"
  "_UNKNOWN_MOVABLE\020\001\022\030\n\024ST_UNKNOWN_UNMOVAB"
  "LE\020\002\022\n\n\006ST_CAR\020\003\022\n\n\006ST_VAN\020\004\022\014\n\010ST_TRUCK"
  "\020\005\022\n\n\006ST_BUS\020\006\022\016\n\nST_CYCLIST\020\007\022\023\n\017ST_MOT"
  "ORCYCLIST\020\010\022\021\n\rST_TRICYCLIST\020\t\022\021\n\rST_PED"
  "ESTRIAN\020\n\022\022\n\016ST_TRAFFICCONE\020\013\"#\n\006Source\022"
  "\020\n\014HOST_VEHICLE\020\000\022\007\n\003V2X\020\001\"\225\002\n\nLaneMarke"
  "r\0226\n\tlane_type\030\001 \001(\0162#.apollo.hdmap.Lane"
  "BoundaryType.Type\022\017\n\007quality\030\002 \001(\001\022\024\n\014mo"
  "del_degree\030\003 \001(\005\022\023\n\013c0_position\030\004 \001(\001\022\030\n"
  "\020c1_heading_angle\030\005 \001(\001\022\024\n\014c2_curvature\030"
  "\006 \001(\001\022\037\n\027c3_curvature_derivative\030\007 \001(\001\022\022"
  "\n\nview_range\030\010 \001(\001\022\027\n\017longitude_start\030\t "
  "\001(\001\022\025\n\rlongitude_end\030\n \001(\001\"\375\001\n\013LaneMarke"
  "rs\0227\n\020left_lane_marker\030\001 \001(\0132\035.apollo.pe"
  "rception.LaneMarker\0228\n\021right_lane_marker"
  "\030\002 \001(\0132\035.apollo.perception.LaneMarker\022<\n"
  "\025next_left_lane_marker\030\003 \003(\0132\035.apollo.pe"
  "rception.LaneMarker\022=\n\026next_right_lane_m"
  "arker\030\004 \003(\0132\035.apollo.perception.LaneMark"
  "er\"6\n\010CIPVInfo\022\017\n\007cipv_id\030\001 \001(\005\022\031\n\021poten"
  "tial_cipv_id\030\002 \003(\005\"\227\002\n\023PerceptionObstacl"
  "es\022B\n\023perception_obstacle\030\001 \003(\0132%.apollo"
  ".perception.PerceptionObstacle\022%\n\006header"
  "\030\002 \001(\0132\025.apollo.common.Header\0220\n\nerror_c"
  "ode\030\003 \001(\0162\030.apollo.common.ErrorCode:\002OK\022"
  "3\n\013lane_marker\030\004 \001(\0132\036.apollo.perception"
  ".LaneMarkers\022.\n\tcipv_info\030\005 \001(\0132\033.apollo"
  ".perception.CIPVInfo"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_perception_5fobstacle_2eproto_deps[5] = {
  &::descriptor_table_error_5fcode_2eproto,
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_header_2eproto,
  &::descriptor_table_map_5flane_2eproto,
  &::descriptor_table_pnc_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_perception_5fobstacle_2eproto_sccs[11] = {
  &scc_info_BBox2D_perception_5fobstacle_2eproto.base,
  &scc_info_CIPVInfo_perception_5fobstacle_2eproto.base,
  &scc_info_DebugMessage_perception_5fobstacle_2eproto.base,
  &scc_info_LaneMarker_perception_5fobstacle_2eproto.base,
  &scc_info_LaneMarkers_perception_5fobstacle_2eproto.base,
  &scc_info_LightStatus_perception_5fobstacle_2eproto.base,
  &scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base,
  &scc_info_PerceptionObstacles_perception_5fobstacle_2eproto.base,
  &scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base,
  &scc_info_Trajectory_perception_5fobstacle_2eproto.base,
  &scc_info_V2XInformation_perception_5fobstacle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_perception_5fobstacle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_perception_5fobstacle_2eproto = {
  false, false, descriptor_table_protodef_perception_5fobstacle_2eproto, "perception_obstacle.proto", 3500,
  &descriptor_table_perception_5fobstacle_2eproto_once, descriptor_table_perception_5fobstacle_2eproto_sccs, descriptor_table_perception_5fobstacle_2eproto_deps, 11, 5,
  schemas, file_default_instances, TableStruct_perception_5fobstacle_2eproto::offsets,
  file_level_metadata_perception_5fobstacle_2eproto, 11, file_level_enum_descriptors_perception_5fobstacle_2eproto, file_level_service_descriptors_perception_5fobstacle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_perception_5fobstacle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_perception_5fobstacle_2eproto)), true);
namespace apollo {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V2XInformation_V2XType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[0];
}
bool V2XInformation_V2XType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr V2XInformation_V2XType V2XInformation::NONE;
constexpr V2XInformation_V2XType V2XInformation::ZOMBIES_CAR;
constexpr V2XInformation_V2XType V2XInformation::BLIND_ZONE;
constexpr V2XInformation_V2XType V2XInformation::V2XType_MIN;
constexpr V2XInformation_V2XType V2XInformation::V2XType_MAX;
constexpr int V2XInformation::V2XType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[1];
}
bool PerceptionObstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
constexpr PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
constexpr PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
constexpr PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
constexpr int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[2];
}
bool PerceptionObstacle_ConfidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_UNKNOWN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_CNN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_RADAR;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MIN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MAX;
constexpr int PerceptionObstacle::ConfidenceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_SubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[3];
}
bool PerceptionObstacle_SubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN_MOVABLE;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN_UNMOVABLE;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_CAR;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_VAN;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_TRUCK;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_BUS;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_CYCLIST;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_MOTORCYCLIST;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_TRICYCLIST;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_PEDESTRIAN;
constexpr PerceptionObstacle_SubType PerceptionObstacle::ST_TRAFFICCONE;
constexpr PerceptionObstacle_SubType PerceptionObstacle::SubType_MIN;
constexpr PerceptionObstacle_SubType PerceptionObstacle::SubType_MAX;
constexpr int PerceptionObstacle::SubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_Source_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[4];
}
bool PerceptionObstacle_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerceptionObstacle_Source PerceptionObstacle::HOST_VEHICLE;
constexpr PerceptionObstacle_Source PerceptionObstacle::V2X;
constexpr PerceptionObstacle_Source PerceptionObstacle::Source_MIN;
constexpr PerceptionObstacle_Source PerceptionObstacle::Source_MAX;
constexpr int PerceptionObstacle::Source_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class BBox2D::_Internal {
 public:
  using HasBits = decltype(std::declval<BBox2D>()._has_bits_);
  static void set_has_xmin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ymin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xmax(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ymax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BBox2D::BBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.BBox2D)
}
BBox2D::BBox2D(const BBox2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ymax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.BBox2D)
}

void BBox2D::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&xmin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
}

BBox2D::~BBox2D() {
  // @@protoc_insertion_point(destructor:apollo.perception.BBox2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BBox2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BBox2D::ArenaDtor(void* object) {
  BBox2D* _this = reinterpret_cast< BBox2D* >(object);
  (void)_this;
}
void BBox2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBox2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBox2D& BBox2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBox2D_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void BBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.BBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ymax_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBox2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_xmin(&has_bits);
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ymin(&has_bits);
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double xmax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_xmax(&has_bits);
          xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ymax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_ymax(&has_bits);
          ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBox2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.BBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_xmin(), target);
  }

  // optional double ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ymin(), target);
  }

  // optional double xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_xmax(), target);
  }

  // optional double ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ymax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.BBox2D)
  return target;
}

size_t BBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.BBox2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double xmin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ymin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double xmax = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ymax = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBox2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.BBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  const BBox2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBox2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.BBox2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.BBox2D)
    MergeFrom(*source);
  }
}

void BBox2D::MergeFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.BBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BBox2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.BBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBox2D::CopyFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.BBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox2D::IsInitialized() const {
  return true;
}

void BBox2D::InternalSwap(BBox2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BBox2D, ymax_)
      + sizeof(BBox2D::ymax_)
      - PROTOBUF_FIELD_OFFSET(BBox2D, xmin_)>(
          reinterpret_cast<char*>(&xmin_),
          reinterpret_cast<char*>(&other->xmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LightStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<LightStatus>()._has_bits_);
  static void set_has_brake_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_switch_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left_turn_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_left_turn_switch_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_right_turn_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_right_turn_switch_on(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LightStatus::LightStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.LightStatus)
}
LightStatus::LightStatus(const LightStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&brake_visible_, &from.brake_visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_turn_switch_on_) -
    reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LightStatus)
}

void LightStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&brake_visible_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&right_turn_switch_on_) -
      reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
}

LightStatus::~LightStatus() {
  // @@protoc_insertion_point(destructor:apollo.perception.LightStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LightStatus::ArenaDtor(void* object) {
  LightStatus* _this = reinterpret_cast< LightStatus* >(object);
  (void)_this;
}
void LightStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightStatus& LightStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightStatus_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void LightStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LightStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&brake_visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_turn_switch_on_) -
        reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double brake_visible = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_brake_visible(&has_bits);
          brake_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_switch_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_brake_switch_on(&has_bits);
          brake_switch_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double left_turn_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_left_turn_visible(&has_bits);
          left_turn_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double left_turn_switch_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_left_turn_switch_on(&has_bits);
          left_turn_switch_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double right_turn_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_right_turn_visible(&has_bits);
          right_turn_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double right_turn_switch_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_right_turn_switch_on(&has_bits);
          right_turn_switch_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LightStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_visible = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_brake_visible(), target);
  }

  // optional double brake_switch_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_brake_switch_on(), target);
  }

  // optional double left_turn_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_left_turn_visible(), target);
  }

  // optional double left_turn_switch_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_left_turn_switch_on(), target);
  }

  // optional double right_turn_visible = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_right_turn_visible(), target);
  }

  // optional double right_turn_switch_on = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_right_turn_switch_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LightStatus)
  return target;
}

size_t LightStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LightStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double brake_visible = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double brake_switch_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double left_turn_visible = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double left_turn_switch_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double right_turn_visible = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double right_turn_switch_on = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LightStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LightStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LightStatus)
    MergeFrom(*source);
  }
}

void LightStatus::MergeFrom(const LightStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      brake_visible_ = from.brake_visible_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_switch_on_ = from.brake_switch_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      left_turn_visible_ = from.left_turn_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_turn_switch_on_ = from.left_turn_switch_on_;
    }
    if (cached_has_bits & 0x00000010u) {
      right_turn_visible_ = from.right_turn_visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_turn_switch_on_ = from.right_turn_switch_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LightStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightStatus::CopyFrom(const LightStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightStatus::IsInitialized() const {
  return true;
}

void LightStatus::InternalSwap(LightStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightStatus, right_turn_switch_on_)
      + sizeof(LightStatus::right_turn_switch_on_)
      - PROTOBUF_FIELD_OFFSET(LightStatus, brake_visible_)>(
          reinterpret_cast<char*>(&brake_visible_),
          reinterpret_cast<char*>(&other->brake_visible_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LightStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class V2XInformation::_Internal {
 public:
};

V2XInformation::V2XInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v2x_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.V2XInformation)
}
V2XInformation::V2XInformation(const V2XInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v2x_type_(from.v2x_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.V2XInformation)
}

void V2XInformation::SharedCtor() {
}

V2XInformation::~V2XInformation() {
  // @@protoc_insertion_point(destructor:apollo.perception.V2XInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void V2XInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void V2XInformation::ArenaDtor(void* object) {
  V2XInformation* _this = reinterpret_cast< V2XInformation* >(object);
  (void)_this;
}
void V2XInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void V2XInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V2XInformation& V2XInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_V2XInformation_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void V2XInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.V2XInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v2x_type_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V2XInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::perception::V2XInformation_V2XType_IsValid(val))) {
              _internal_add_v2x_type(static_cast<::apollo::perception::V2XInformation_V2XType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_v2x_type(), ptr, ctx, ::apollo::perception::V2XInformation_V2XType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* V2XInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.V2XInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
  for (int i = 0, n = this->_internal_v2x_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_v2x_type(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.V2XInformation)
  return target;
}

size_t V2XInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.V2XInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.V2XInformation.V2XType v2x_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_v2x_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_v2x_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V2XInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.V2XInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const V2XInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<V2XInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.V2XInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.V2XInformation)
    MergeFrom(*source);
  }
}

void V2XInformation::MergeFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.V2XInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v2x_type_.MergeFrom(from.v2x_type_);
}

void V2XInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.V2XInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V2XInformation::CopyFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.V2XInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XInformation::IsInitialized() const {
  return true;
}

void V2XInformation::InternalSwap(V2XInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v2x_type_.InternalSwap(&other->v2x_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata V2XInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SensorMeasurement::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorMeasurement>()._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::Point3D& position(const SensorMeasurement* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::common::Point3D& velocity(const SensorMeasurement* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::perception::BBox2D& box(const SensorMeasurement* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Point3D&
SensorMeasurement::_Internal::position(const SensorMeasurement* msg) {
  return *msg->position_;
}
const ::apollo::common::Point3D&
SensorMeasurement::_Internal::velocity(const SensorMeasurement* msg) {
  return *msg->velocity_;
}
const ::apollo::perception::BBox2D&
SensorMeasurement::_Internal::box(const SensorMeasurement* msg) {
  return *msg->box_;
}
void SensorMeasurement::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SensorMeasurement::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SensorMeasurement::SensorMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.SensorMeasurement)
}
SensorMeasurement::SensorMeasurement(const SensorMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sensor_id()) {
    sensor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensor_id(), 
      GetArena());
  }
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_box()) {
    box_ = new ::apollo::perception::BBox2D(*from.box_);
  } else {
    box_ = nullptr;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(sub_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.SensorMeasurement)
}

void SensorMeasurement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base);
  sensor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(sub_type_));
}

SensorMeasurement::~SensorMeasurement() {
  // @@protoc_insertion_point(destructor:apollo.perception.SensorMeasurement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorMeasurement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sensor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete box_;
}

void SensorMeasurement::ArenaDtor(void* object) {
  SensorMeasurement* _this = reinterpret_cast< SensorMeasurement* >(object);
  (void)_this;
}
void SensorMeasurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorMeasurement& SensorMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void SensorMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.SensorMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sensor_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(box_ != nullptr);
      box_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_type_) -
        reinterpret_cast<char*>(&width_)) + sizeof(sub_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sensor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.SensorMeasurement.sensor_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_SubType_IsValid(val))) {
            _internal_set_sub_type(static_cast<::apollo::perception::PerceptionObstacle_SubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.BBox2D box = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorMeasurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.SensorMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_id().data(), static_cast<int>(this->_internal_sensor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.SensorMeasurement.sensor_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_id(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional .apollo.common.Point3D position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta(), target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_height(), target);
  }

  // optional .apollo.common.Point3D velocity = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::velocity(this), target, stream);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_sub_type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_timestamp(), target);
  }

  // optional .apollo.perception.BBox2D box = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.SensorMeasurement)
  return target;
}

size_t SensorMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.SensorMeasurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_id());
    }

    // optional .apollo.common.Point3D position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D velocity = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .apollo.perception.BBox2D box = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_);
    }

    // optional double theta = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double width = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMeasurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.SensorMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMeasurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.SensorMeasurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.SensorMeasurement)
    MergeFrom(*source);
  }
}

void SensorMeasurement::MergeFrom(const SensorMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.SensorMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sensor_id(from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_box()->::apollo::perception::BBox2D::MergeFrom(from._internal_box());
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      sub_type_ = from.sub_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorMeasurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.SensorMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMeasurement::CopyFrom(const SensorMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.SensorMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeasurement::IsInitialized() const {
  return true;
}

void SensorMeasurement::InternalSwap(SensorMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_id_.Swap(&other->sensor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorMeasurement, sub_type_)
      + sizeof(SensorMeasurement::sub_type_)
      - PROTOBUF_FIELD_OFFSET(SensorMeasurement, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMeasurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectory>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.Trajectory)
}

void Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_perception_5fobstacle_2eproto.base);
  probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.perception.Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trajectory::ArenaDtor(void* object) {
  Trajectory* _this = reinterpret_cast< Trajectory* >(object);
  (void)_this;
}
void Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double probability = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DebugMessage::_Internal {
 public:
};

DebugMessage::DebugMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.DebugMessage)
}
DebugMessage::DebugMessage(const DebugMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.DebugMessage)
}

void DebugMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugMessage_perception_5fobstacle_2eproto.base);
}

DebugMessage::~DebugMessage() {
  // @@protoc_insertion_point(destructor:apollo.perception.DebugMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DebugMessage::ArenaDtor(void* object) {
  DebugMessage* _this = reinterpret_cast< DebugMessage* >(object);
  (void)_this;
}
void DebugMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugMessage& DebugMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugMessage_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void DebugMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.DebugMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.Trajectory trajectory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.DebugMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.Trajectory trajectory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trajectory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.DebugMessage)
  return target;
}

size_t DebugMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.DebugMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.Trajectory trajectory = 1;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.DebugMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.DebugMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.DebugMessage)
    MergeFrom(*source);
  }
}

void DebugMessage::MergeFrom(const DebugMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.DebugMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
}

void DebugMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMessage::CopyFrom(const DebugMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMessage::IsInitialized() const {
  return true;
}

void DebugMessage::InternalSwap(DebugMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trajectory_.InternalSwap(&other->trajectory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerceptionObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionObstacle>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::common::Point3D& position(const PerceptionObstacle* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::common::Point3D& velocity(const PerceptionObstacle* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_confidence_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::common::Point3D& acceleration(const PerceptionObstacle* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& anchor_point(const PerceptionObstacle* msg);
  static void set_has_anchor_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::BBox2D& bbox2d(const PerceptionObstacle* msg);
  static void set_has_bbox2d(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_height_above_ground(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::perception::LightStatus& light_status(const PerceptionObstacle* msg);
  static void set_has_light_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::DebugMessage& msg(const PerceptionObstacle* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::perception::V2XInformation& v2x_info(const PerceptionObstacle* msg);
  static void set_has_v2x_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::common::Point3D&
PerceptionObstacle::_Internal::position(const PerceptionObstacle* msg) {
  return *msg->position_;
}
const ::apollo::common::Point3D&
PerceptionObstacle::_Internal::velocity(const PerceptionObstacle* msg) {
  return *msg->velocity_;
}
const ::apollo::common::Point3D&
PerceptionObstacle::_Internal::acceleration(const PerceptionObstacle* msg) {
  return *msg->acceleration_;
}
const ::apollo::common::Point3D&
PerceptionObstacle::_Internal::anchor_point(const PerceptionObstacle* msg) {
  return *msg->anchor_point_;
}
const ::apollo::perception::BBox2D&
PerceptionObstacle::_Internal::bbox2d(const PerceptionObstacle* msg) {
  return *msg->bbox2d_;
}
const ::apollo::perception::LightStatus&
PerceptionObstacle::_Internal::light_status(const PerceptionObstacle* msg) {
  return *msg->light_status_;
}
const ::apollo::perception::DebugMessage&
PerceptionObstacle::_Internal::msg(const PerceptionObstacle* msg) {
  return *msg->msg_;
}
const ::apollo::perception::V2XInformation&
PerceptionObstacle::_Internal::v2x_info(const PerceptionObstacle* msg) {
  return *msg->v2x_info_;
}
void PerceptionObstacle::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacle::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
void PerceptionObstacle::clear_drops() {
  drops_.Clear();
}
void PerceptionObstacle::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacle::clear_anchor_point() {
  if (anchor_point_ != nullptr) anchor_point_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PerceptionObstacle::PerceptionObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polygon_point_(arena),
  point_cloud_(arena),
  drops_(arena),
  measurements_(arena),
  position_covariance_(arena),
  velocity_covariance_(arena),
  acceleration_covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.PerceptionObstacle)
}
PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_),
      point_cloud_(from.point_cloud_),
      drops_(from.drops_),
      measurements_(from.measurements_),
      position_covariance_(from.position_covariance_),
      velocity_covariance_(from.velocity_covariance_),
      acceleration_covariance_(from.acceleration_covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::apollo::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_anchor_point()) {
    anchor_point_ = new ::apollo::common::Point3D(*from.anchor_point_);
  } else {
    anchor_point_ = nullptr;
  }
  if (from._internal_has_bbox2d()) {
    bbox2d_ = new ::apollo::perception::BBox2D(*from.bbox2d_);
  } else {
    bbox2d_ = nullptr;
  }
  if (from._internal_has_light_status()) {
    light_status_ = new ::apollo::perception::LightStatus(*from.light_status_);
  } else {
    light_status_ = nullptr;
  }
  if (from._internal_has_msg()) {
    msg_ = new ::apollo::perception::DebugMessage(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  if (from._internal_has_v2x_info()) {
    v2x_info_ = new ::apollo::perception::V2XInformation(*from.v2x_info_);
  } else {
    v2x_info_ = nullptr;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_above_ground_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(height_above_ground_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&position_)) + sizeof(source_));
  height_above_ground_ = std::numeric_limits<double>::quiet_NaN();
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerceptionObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete anchor_point_;
  if (this != internal_default_instance()) delete bbox2d_;
  if (this != internal_default_instance()) delete light_status_;
  if (this != internal_default_instance()) delete msg_;
  if (this != internal_default_instance()) delete v2x_info_;
}

void PerceptionObstacle::ArenaDtor(void* object) {
  PerceptionObstacle* _this = reinterpret_cast< PerceptionObstacle* >(object);
  (void)_this;
}
void PerceptionObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerceptionObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceptionObstacle& PerceptionObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  point_cloud_.Clear();
  drops_.Clear();
  measurements_.Clear();
  position_covariance_.Clear();
  velocity_covariance_.Clear();
  acceleration_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(anchor_point_ != nullptr);
      anchor_point_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bbox2d_ != nullptr);
      bbox2d_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(light_status_ != nullptr);
      light_status_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(msg_ != nullptr);
      msg_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(v2x_info_ != nullptr);
      v2x_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(timestamp_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(source_));
    height_above_ground_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D polygon_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double tracking_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_tracking_time(&has_bits);
          tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double point_cloud = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_point_cloud(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97) {
          _internal_add_point_cloud(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double confidence = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(val))) {
            _internal_set_confidence_type(static_cast<::apollo::perception::PerceptionObstacle_ConfidenceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D acceleration = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D anchor_point = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.BBox2D bbox2d = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_SubType_IsValid(val))) {
            _internal_set_sub_type(static_cast<::apollo::perception::PerceptionObstacle_SubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.SensorMeasurement measurements = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double height_above_ground = 21 [default = nan];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_height_above_ground(&has_bits);
          height_above_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double position_covariance = 22 [packed = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177) {
          _internal_add_position_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double velocity_covariance = 23 [packed = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185) {
          _internal_add_velocity_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double acceleration_covariance = 24 [packed = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_acceleration_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193) {
          _internal_add_acceleration_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.LightStatus light_status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.DebugMessage msg = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Source_IsValid(val))) {
            _internal_set_source(static_cast<::apollo::perception::PerceptionObstacle_Source>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.V2XInformation v2x_info = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_v2x_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceptionObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_theta(), target);
  }

  // optional .apollo.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_height(), target);
  }

  // repeated .apollo.common.Point3D polygon_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_polygon_point(i), target, stream);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_tracking_time(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_timestamp(), target);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->_internal_point_cloud_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_point_cloud(), target);
  }

  // optional double confidence = 13 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_confidence(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_confidence_type(), target);
  }

  // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_drops(i), target, stream);
  }

  // optional .apollo.common.Point3D acceleration = 16;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::acceleration(this), target, stream);
  }

  // optional .apollo.common.Point3D anchor_point = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::anchor_point(this), target, stream);
  }

  // optional .apollo.perception.BBox2D bbox2d = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::bbox2d(this), target, stream);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_sub_type(), target);
  }

  // repeated .apollo.perception.SensorMeasurement measurements = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_measurements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_measurements(i), target, stream);
  }

  // optional double height_above_ground = 21 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_height_above_ground(), target);
  }

  // repeated double position_covariance = 22 [packed = true];
  if (this->_internal_position_covariance_size() > 0) {
    target = stream->WriteFixedPacked(22, _internal_position_covariance(), target);
  }

  // repeated double velocity_covariance = 23 [packed = true];
  if (this->_internal_velocity_covariance_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_velocity_covariance(), target);
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  if (this->_internal_acceleration_covariance_size() > 0) {
    target = stream->WriteFixedPacked(24, _internal_acceleration_covariance(), target);
  }

  // optional .apollo.perception.LightStatus light_status = 25;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::light_status(this), target, stream);
  }

  // optional .apollo.perception.DebugMessage msg = 26;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::msg(this), target, stream);
  }

  // optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_source(), target);
  }

  // optional .apollo.perception.V2XInformation v2x_info = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::v2x_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacle)
  return target;
}

size_t PerceptionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D polygon_point = 8;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double point_cloud = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_point_cloud_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _point_cloud_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
  total_size += 1UL * this->_internal_drops_size();
  for (const auto& msg : this->drops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.SensorMeasurement measurements = 20;
  total_size += 2UL * this->_internal_measurements_size();
  for (const auto& msg : this->measurements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double position_covariance = 22 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double velocity_covariance = 23 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _velocity_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_acceleration_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _acceleration_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional .apollo.common.Point3D anchor_point = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_point_);
    }

    // optional .apollo.perception.BBox2D bbox2d = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bbox2d_);
    }

    // optional .apollo.perception.LightStatus light_status = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_status_);
    }

    // optional .apollo.perception.DebugMessage msg = 26;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_);
    }

    // optional .apollo.perception.V2XInformation v2x_info = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v2x_info_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double theta = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double width = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double tracking_time = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional double confidence = 13 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_confidence_type());
    }

    // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_type());
    }

    // optional .apollo.perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
    }

    // optional double height_above_ground = 21 [default = nan];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerceptionObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacle)
    MergeFrom(*source);
  }
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  point_cloud_.MergeFrom(from.point_cloud_);
  drops_.MergeFrom(from.drops_);
  measurements_.MergeFrom(from.measurements_);
  position_covariance_.MergeFrom(from.position_covariance_);
  velocity_covariance_.MergeFrom(from.velocity_covariance_);
  acceleration_covariance_.MergeFrom(from.acceleration_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_anchor_point()->::apollo::common::Point3D::MergeFrom(from._internal_anchor_point());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_bbox2d()->::apollo::perception::BBox2D::MergeFrom(from._internal_bbox2d());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_light_status()->::apollo::perception::LightStatus::MergeFrom(from._internal_light_status());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_msg()->::apollo::perception::DebugMessage::MergeFrom(from._internal_msg());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_v2x_info()->::apollo::perception::V2XInformation::MergeFrom(from._internal_v2x_info());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000200u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00002000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00004000u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00020000u) {
      confidence_type_ = from.confidence_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      sub_type_ = from.sub_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00100000u) {
      height_above_ground_ = from.height_above_ground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {
  return true;
}

void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_point_.InternalSwap(&other->polygon_point_);
  point_cloud_.InternalSwap(&other->point_cloud_);
  drops_.InternalSwap(&other->drops_);
  measurements_.InternalSwap(&other->measurements_);
  position_covariance_.InternalSwap(&other->position_covariance_);
  velocity_covariance_.InternalSwap(&other->velocity_covariance_);
  acceleration_covariance_.InternalSwap(&other->acceleration_covariance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionObstacle, source_)
      + sizeof(PerceptionObstacle::source_)
      - PROTOBUF_FIELD_OFFSET(PerceptionObstacle, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
  swap(height_above_ground_, other->height_above_ground_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneMarker::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneMarker>()._has_bits_);
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c0_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c1_heading_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_c2_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_c3_curvature_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_view_range(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_longitude_start(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_longitude_end(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

LaneMarker::LaneMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.LaneMarker)
}
LaneMarker::LaneMarker(const LaneMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_end_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(longitude_end_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarker)
}

void LaneMarker::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_end_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(longitude_end_));
}

LaneMarker::~LaneMarker() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LaneMarker::ArenaDtor(void* object) {
  LaneMarker* _this = reinterpret_cast< LaneMarker* >(object);
  (void)_this;
}
void LaneMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarker& LaneMarker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarker_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void LaneMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_range_) -
        reinterpret_cast<char*>(&quality_)) + sizeof(view_range_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&longitude_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_end_) -
        reinterpret_cast<char*>(&longitude_start_)) + sizeof(longitude_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::LaneBoundaryType_Type_IsValid(val))) {
            _internal_set_lane_type(static_cast<::apollo::hdmap::LaneBoundaryType_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 model_degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_model_degree(&has_bits);
          model_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double c0_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_c0_position(&has_bits);
          c0_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c1_heading_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_c1_heading_angle(&has_bits);
          c1_heading_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c2_curvature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_c2_curvature(&has_bits);
          c2_curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double c3_curvature_derivative = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_c3_curvature_derivative(&has_bits);
          c3_curvature_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double view_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_view_range(&has_bits);
          view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude_start = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_longitude_start(&has_bits);
          longitude_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude_end = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_longitude_end(&has_bits);
          longitude_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lane_type(), target);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_degree(), target);
  }

  // optional double c0_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_c0_position(), target);
  }

  // optional double c1_heading_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_c1_heading_angle(), target);
  }

  // optional double c2_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_c2_curvature(), target);
  }

  // optional double c3_curvature_derivative = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_c3_curvature_derivative(), target);
  }

  // optional double view_range = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_view_range(), target);
  }

  // optional double longitude_start = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_longitude_start(), target);
  }

  // optional double longitude_end = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_longitude_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarker)
  return target;
}

size_t LaneMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double quality = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lane_type());
    }

    // optional int32 model_degree = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_model_degree());
    }

    // optional double c0_position = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double c1_heading_angle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double c2_curvature = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double c3_curvature_derivative = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double view_range = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double longitude_start = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double longitude_end = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LaneMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LaneMarker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LaneMarker)
    MergeFrom(*source);
  }
}

void LaneMarker::MergeFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      model_degree_ = from.model_degree_;
    }
    if (cached_has_bits & 0x00000008u) {
      c0_position_ = from.c0_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      c1_heading_angle_ = from.c1_heading_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      c2_curvature_ = from.c2_curvature_;
    }
    if (cached_has_bits & 0x00000040u) {
      c3_curvature_derivative_ = from.c3_curvature_derivative_;
    }
    if (cached_has_bits & 0x00000080u) {
      view_range_ = from.view_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      longitude_start_ = from.longitude_start_;
    }
    if (cached_has_bits & 0x00000200u) {
      longitude_end_ = from.longitude_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneMarker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarker::CopyFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarker::IsInitialized() const {
  return true;
}

void LaneMarker::InternalSwap(LaneMarker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneMarker, longitude_end_)
      + sizeof(LaneMarker::longitude_end_)
      - PROTOBUF_FIELD_OFFSET(LaneMarker, quality_)>(
          reinterpret_cast<char*>(&quality_),
          reinterpret_cast<char*>(&other->quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneMarkers::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneMarkers>()._has_bits_);
  static const ::apollo::perception::LaneMarker& left_lane_marker(const LaneMarkers* msg);
  static void set_has_left_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::LaneMarker& right_lane_marker(const LaneMarkers* msg);
  static void set_has_right_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::LaneMarker&
LaneMarkers::_Internal::left_lane_marker(const LaneMarkers* msg) {
  return *msg->left_lane_marker_;
}
const ::apollo::perception::LaneMarker&
LaneMarkers::_Internal::right_lane_marker(const LaneMarkers* msg) {
  return *msg->right_lane_marker_;
}
LaneMarkers::LaneMarkers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  next_left_lane_marker_(arena),
  next_right_lane_marker_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.LaneMarkers)
}
LaneMarkers::LaneMarkers(const LaneMarkers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      next_left_lane_marker_(from.next_left_lane_marker_),
      next_right_lane_marker_(from.next_right_lane_marker_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_lane_marker()) {
    left_lane_marker_ = new ::apollo::perception::LaneMarker(*from.left_lane_marker_);
  } else {
    left_lane_marker_ = nullptr;
  }
  if (from._internal_has_right_lane_marker()) {
    right_lane_marker_ = new ::apollo::perception::LaneMarker(*from.right_lane_marker_);
  } else {
    right_lane_marker_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarkers)
}

void LaneMarkers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMarkers_perception_5fobstacle_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&left_lane_marker_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&right_lane_marker_) -
      reinterpret_cast<char*>(&left_lane_marker_)) + sizeof(right_lane_marker_));
}

LaneMarkers::~LaneMarkers() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarkers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneMarkers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_lane_marker_;
  if (this != internal_default_instance()) delete right_lane_marker_;
}

void LaneMarkers::ArenaDtor(void* object) {
  LaneMarkers* _this = reinterpret_cast< LaneMarkers* >(object);
  (void)_this;
}
void LaneMarkers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneMarkers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarkers& LaneMarkers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarkers_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void LaneMarkers::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarkers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_left_lane_marker_.Clear();
  next_right_lane_marker_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_lane_marker_ != nullptr);
      left_lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_lane_marker_ != nullptr);
      right_lane_marker_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneMarkers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.LaneMarker left_lane_marker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_lane_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarker right_lane_marker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_lane_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_left_lane_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_right_lane_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarkers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarkers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::left_lane_marker(this), target, stream);
  }

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right_lane_marker(this), target, stream);
  }

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_next_left_lane_marker_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_next_left_lane_marker(i), target, stream);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_next_right_lane_marker_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_next_right_lane_marker(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarkers)
  return target;
}

size_t LaneMarkers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarkers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  total_size += 1UL * this->_internal_next_left_lane_marker_size();
  for (const auto& msg : this->next_left_lane_marker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  total_size += 1UL * this->_internal_next_right_lane_marker_size();
  for (const auto& msg : this->next_right_lane_marker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.LaneMarker left_lane_marker = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_lane_marker_);
    }

    // optional .apollo.perception.LaneMarker right_lane_marker = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_lane_marker_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarkers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.LaneMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarkers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.LaneMarkers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.LaneMarkers)
    MergeFrom(*source);
  }
}

void LaneMarkers::MergeFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_left_lane_marker_.MergeFrom(from.next_left_lane_marker_);
  next_right_lane_marker_.MergeFrom(from.next_right_lane_marker_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from._internal_left_lane_marker());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from._internal_right_lane_marker());
    }
  }
}

void LaneMarkers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkers::CopyFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkers::IsInitialized() const {
  return true;
}

void LaneMarkers::InternalSwap(LaneMarkers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  next_left_lane_marker_.InternalSwap(&other->next_left_lane_marker_);
  next_right_lane_marker_.InternalSwap(&other->next_right_lane_marker_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneMarkers, right_lane_marker_)
      + sizeof(LaneMarkers::right_lane_marker_)
      - PROTOBUF_FIELD_OFFSET(LaneMarkers, left_lane_marker_)>(
          reinterpret_cast<char*>(&left_lane_marker_),
          reinterpret_cast<char*>(&other->left_lane_marker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarkers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CIPVInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CIPVInfo>()._has_bits_);
  static void set_has_cipv_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CIPVInfo::CIPVInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  potential_cipv_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.CIPVInfo)
}
CIPVInfo::CIPVInfo(const CIPVInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      potential_cipv_id_(from.potential_cipv_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cipv_id_ = from.cipv_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.CIPVInfo)
}

void CIPVInfo::SharedCtor() {
  cipv_id_ = 0;
}

CIPVInfo::~CIPVInfo() {
  // @@protoc_insertion_point(destructor:apollo.perception.CIPVInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CIPVInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIPVInfo::ArenaDtor(void* object) {
  CIPVInfo* _this = reinterpret_cast< CIPVInfo* >(object);
  (void)_this;
}
void CIPVInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIPVInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIPVInfo& CIPVInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIPVInfo_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void CIPVInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.CIPVInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  potential_cipv_id_.Clear();
  cipv_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CIPVInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cipv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cipv_id(&has_bits);
          cipv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 potential_cipv_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_potential_cipv_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_potential_cipv_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIPVInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.CIPVInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cipv_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cipv_id(), target);
  }

  // repeated int32 potential_cipv_id = 2;
  for (int i = 0, n = this->_internal_potential_cipv_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_potential_cipv_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.CIPVInfo)
  return target;
}

size_t CIPVInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.CIPVInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 potential_cipv_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->potential_cipv_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_potential_cipv_id_size());
    total_size += data_size;
  }

  // optional int32 cipv_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cipv_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIPVInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.CIPVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPVInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CIPVInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.CIPVInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.CIPVInfo)
    MergeFrom(*source);
  }
}

void CIPVInfo::MergeFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.CIPVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  potential_cipv_id_.MergeFrom(from.potential_cipv_id_);
  if (from._internal_has_cipv_id()) {
    _internal_set_cipv_id(from._internal_cipv_id());
  }
}

void CIPVInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPVInfo::CopyFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPVInfo::IsInitialized() const {
  return true;
}

void CIPVInfo::InternalSwap(CIPVInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  potential_cipv_id_.InternalSwap(&other->potential_cipv_id_);
  swap(cipv_id_, other->cipv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CIPVInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerceptionObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionObstacles>()._has_bits_);
  static const ::apollo::common::Header& header(const PerceptionObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::LaneMarkers& lane_marker(const PerceptionObstacles* msg);
  static void set_has_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::CIPVInfo& cipv_info(const PerceptionObstacles* msg);
  static void set_has_cipv_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
PerceptionObstacles::_Internal::header(const PerceptionObstacles* msg) {
  return *msg->header_;
}
const ::apollo::perception::LaneMarkers&
PerceptionObstacles::_Internal::lane_marker(const PerceptionObstacles* msg) {
  return *msg->lane_marker_;
}
const ::apollo::perception::CIPVInfo&
PerceptionObstacles::_Internal::cipv_info(const PerceptionObstacles* msg) {
  return *msg->cipv_info_;
}
void PerceptionObstacles::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PerceptionObstacles::PerceptionObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  perception_obstacle_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.PerceptionObstacles)
}
PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      perception_obstacle_(from.perception_obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lane_marker()) {
    lane_marker_ = new ::apollo::perception::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = nullptr;
  }
  if (from._internal_has_cipv_info()) {
    cipv_info_ = new ::apollo::perception::CIPVInfo(*from.cipv_info_);
  } else {
    cipv_info_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacles)
}

void PerceptionObstacles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerceptionObstacles_perception_5fobstacle_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_code_));
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerceptionObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lane_marker_;
  if (this != internal_default_instance()) delete cipv_info_;
}

void PerceptionObstacles::ArenaDtor(void* object) {
  PerceptionObstacles* _this = reinterpret_cast< PerceptionObstacles* >(object);
  (void)_this;
}
void PerceptionObstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerceptionObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceptionObstacles& PerceptionObstacles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerceptionObstacles_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_marker_ != nullptr);
      lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cipv_info_ != nullptr);
      cipv_info_->Clear();
    }
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionObstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perception_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::common::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.CIPVInfo cipv_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cipv_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceptionObstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perception_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_perception_obstacle(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error_code(), target);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lane_marker(this), target, stream);
  }

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cipv_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacles)
  return target;
}

size_t PerceptionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  total_size += 1UL * this->_internal_perception_obstacle_size();
  for (const auto& msg : this->perception_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_marker_);
    }

    // optional .apollo.perception.CIPVInfo cipv_info = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cipv_info_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionObstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerceptionObstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.PerceptionObstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.PerceptionObstacles)
    MergeFrom(*source);
  }
}

void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_.MergeFrom(from.perception_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from._internal_lane_marker());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cipv_info()->::apollo::perception::CIPVInfo::MergeFrom(from._internal_cipv_info());
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {
  return true;
}

void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  perception_obstacle_.InternalSwap(&other->perception_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionObstacles, error_code_)
      + sizeof(PerceptionObstacles::error_code_)
      - PROTOBUF_FIELD_OFFSET(PerceptionObstacles, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionObstacles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::BBox2D* Arena::CreateMaybeMessage< ::apollo::perception::BBox2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::BBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::LightStatus* Arena::CreateMaybeMessage< ::apollo::perception::LightStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::LightStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::V2XInformation* Arena::CreateMaybeMessage< ::apollo::perception::V2XInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::V2XInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::SensorMeasurement* Arena::CreateMaybeMessage< ::apollo::perception::SensorMeasurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::SensorMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::Trajectory* Arena::CreateMaybeMessage< ::apollo::perception::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::DebugMessage* Arena::CreateMaybeMessage< ::apollo::perception::DebugMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::DebugMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::PerceptionObstacle* Arena::CreateMaybeMessage< ::apollo::perception::PerceptionObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::PerceptionObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::LaneMarker* Arena::CreateMaybeMessage< ::apollo::perception::LaneMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::LaneMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::LaneMarkers* Arena::CreateMaybeMessage< ::apollo::perception::LaneMarkers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::LaneMarkers >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::CIPVInfo* Arena::CreateMaybeMessage< ::apollo::perception::CIPVInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::CIPVInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::PerceptionObstacles* Arena::CreateMaybeMessage< ::apollo::perception::PerceptionObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::PerceptionObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
