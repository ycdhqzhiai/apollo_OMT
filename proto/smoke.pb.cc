// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smoke.proto

#include "smoke.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_smoke_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBoxStatistics_smoke_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smoke_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimensionStatistics_smoke_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smoke_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelParam_smoke_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smoke_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NMSParam_smoke_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_smoke_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParam_smoke_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace smoke {
class SmokeParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmokeParam> _instance;
} _SmokeParam_default_instance_;
class ModelParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelParam> _instance;
} _ModelParam_default_instance_;
class NetworkParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParam> _instance;
} _NetworkParam_default_instance_;
class NMSParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NMSParam> _instance;
} _NMSParam_default_instance_;
class BBoxStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBoxStatistics> _instance;
} _BBoxStatistics_default_instance_;
class DimensionStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DimensionStatistics> _instance;
} _DimensionStatistics_default_instance_;
}  // namespace smoke
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_BBoxStatistics_smoke_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::smoke::_BBoxStatistics_default_instance_;
    new (ptr) ::apollo::perception::camera::smoke::BBoxStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBoxStatistics_smoke_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BBoxStatistics_smoke_2eproto}, {}};

static void InitDefaultsscc_info_DimensionStatistics_smoke_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::smoke::_DimensionStatistics_default_instance_;
    new (ptr) ::apollo::perception::camera::smoke::DimensionStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimensionStatistics_smoke_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DimensionStatistics_smoke_2eproto}, {}};

static void InitDefaultsscc_info_ModelParam_smoke_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::smoke::_ModelParam_default_instance_;
    new (ptr) ::apollo::perception::camera::smoke::ModelParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelParam_smoke_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelParam_smoke_2eproto}, {
      &scc_info_DimensionStatistics_smoke_2eproto.base,
      &scc_info_BBoxStatistics_smoke_2eproto.base,}};

static void InitDefaultsscc_info_NMSParam_smoke_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::smoke::_NMSParam_default_instance_;
    new (ptr) ::apollo::perception::camera::smoke::NMSParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NMSParam_smoke_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NMSParam_smoke_2eproto}, {}};

static void InitDefaultsscc_info_NetworkParam_smoke_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::smoke::_NetworkParam_default_instance_;
    new (ptr) ::apollo::perception::camera::smoke::NetworkParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParam_smoke_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkParam_smoke_2eproto}, {}};

static void InitDefaultsscc_info_SmokeParam_smoke_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::smoke::_SmokeParam_default_instance_;
    new (ptr) ::apollo::perception::camera::smoke::SmokeParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SmokeParam_smoke_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SmokeParam_smoke_2eproto}, {
      &scc_info_ModelParam_smoke_2eproto.base,
      &scc_info_NetworkParam_smoke_2eproto.base,
      &scc_info_NMSParam_smoke_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_smoke_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_smoke_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_smoke_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_smoke_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, model_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, net_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, nms_param_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, model_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, proto_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, weight_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, stage1_pt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, stage1_md_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, stage2_pt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, stage2_md_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, anchors_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, types_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, feature_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, offset_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, cropped_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, resized_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, aligned_pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, light_vis_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, light_swt_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, roi_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, box_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, stage2_nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, min_2d_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, min_3d_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, min_3d_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, min_3d_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, calibratetable_root_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, model_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, ori_cycle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, per_cls_reg_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, dimension_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, bbox_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, expand_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, with_box3d_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, with_frbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, with_lights_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, with_ratios_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, num_areas_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, border_ratio_),
  0,
  1,
  2,
  9,
  10,
  11,
  12,
  3,
  4,
  5,
  23,
  25,
  26,
  27,
  24,
  32,
  33,
  29,
  30,
  31,
  13,
  14,
  15,
  16,
  6,
  7,
  28,
  17,
  ~0u,
  ~0u,
  8,
  18,
  19,
  20,
  21,
  22,
  34,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det1_loc_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det1_obj_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det1_cls_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det1_ori_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det1_ori_conf_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det1_dim_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det2_loc_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det2_obj_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det2_cls_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det2_ori_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det2_ori_conf_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det2_dim_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det3_loc_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det3_obj_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det3_cls_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det3_ori_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det3_ori_conf_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, det3_dim_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, lof_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, lor_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, input_data_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, input_ratio_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, input_instric_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, rois_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, feat_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, box_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, iou_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, brvis_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, brswt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, ltvis_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, ltswt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, rtvis_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, rtswt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, area_id_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, visible_ratio_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, cut_off_ratio_blob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  33,
  34,
  35,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, inter_cls_conf_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, inter_cls_nms_thresh_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::BBoxStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::BBoxStatistics, mean_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::BBoxStatistics, std_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, mean_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, mean_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, mean_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, std_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, std_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, std_l_),
  0,
  1,
  2,
  4,
  5,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::perception::camera::smoke::SmokeParam)},
  { 11, 53, sizeof(::apollo::perception::camera::smoke::ModelParam)},
  { 90, 131, sizeof(::apollo::perception::camera::smoke::NetworkParam)},
  { 167, 177, sizeof(::apollo::perception::camera::smoke::NMSParam)},
  { 182, -1, sizeof(::apollo::perception::camera::smoke::BBoxStatistics)},
  { 189, 200, sizeof(::apollo::perception::camera::smoke::DimensionStatistics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::smoke::_SmokeParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::smoke::_ModelParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::smoke::_NetworkParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::smoke::_NMSParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::smoke::_BBoxStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::smoke::_DimensionStatistics_default_instance_),
};

const char descriptor_table_protodef_smoke_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013smoke.proto\022\036apollo.perception.camera."
  "smoke\"\313\001\n\nSmokeParam\022\?\n\013model_param\030\001 \001("
  "\0132*.apollo.perception.camera.smoke.Model"
  "Param\022\?\n\tnet_param\030\002 \001(\0132,.apollo.percep"
  "tion.camera.smoke.NetworkParam\022;\n\tnms_pa"
  "ram\030\003 \001(\0132(.apollo.perception.camera.smo"
  "ke.NMSParam\"\313\t\n\nModelParam\022\033\n\nmodel_name"
  "\030\001 \001(\t:\007yolo-2d\022\034\n\nproto_file\030\002 \001(\t:\010caf"
  "fe.pt\022 \n\013weight_file\030\003 \001(\t:\013caffe.model\022"
  "\033\n\tstage1_pt\030\025 \001(\t:\010caffe.pt\022\036\n\tstage1_m"
  "d\030\026 \001(\t:\013caffe.model\022\033\n\tstage2_pt\030\027 \001(\t:"
  "\010caffe.pt\022\036\n\tstage2_md\030\030 \001(\t:\013caffe.mode"
  "l\022!\n\014anchors_file\030\004 \001(\t:\013anchors.txt\022\035\n\n"
  "types_file\030\005 \001(\t:\ttypes.txt\022 \n\014feature_f"
  "ile\030\006 \001(\t:\nfeature.pt\022\036\n\014offset_ratio\030\007 "
  "\001(\002:\0100.288889\022\037\n\rcropped_ratio\030\r \001(\002:\0100."
  "711111\022\033\n\rresized_width\030\016 \001(\005:\0041440\022\031\n\ra"
  "ligned_pixel\030\017 \001(\005:\00232\022!\n\024confidence_thr"
  "eshold\030\010 \001(\002:\0030.1\022%\n\030light_vis_conf_thre"
  "shold\030! \001(\002:\0030.5\022%\n\030light_swt_conf_thres"
  "hold\030\" \001(\002:\0030.5\022\037\n\022roi_conf_threshold\030\031 "
  "\001(\002:\0030.1\022\037\n\022box_conf_threshold\030\032 \001(\002:\0030."
  "5\022!\n\024stage2_nms_threshold\030\033 \001(\002:\0030.4\022\030\n\r"
  "min_2d_height\030\t \001(\002:\0010\022\030\n\rmin_3d_height\030"
  "\036 \001(\002:\0010\022\027\n\014min_3d_width\030\037 \001(\002:\0010\022\030\n\rmin"
  "_3d_length\030  \001(\002:\0010\022\037\n\023calibratetable_ro"
  "ot\030\013 \001(\t:\002./\022\034\n\nmodel_type\030\014 \001(\t:\010CaffeN"
  "et\022\024\n\tori_cycle\030\020 \001(\005:\0011\022\032\n\013per_cls_reg\030"
  "\021 \001(\010:\005false\022Q\n\024dimension_statistics\030\022 \003"
  "(\01323.apollo.perception.camera.smoke.Dime"
  "nsionStatistics\022G\n\017bbox_statistics\030\023 \003(\013"
  "2..apollo.perception.camera.smoke.BBoxSt"
  "atistics\022\037\n\013expand_file\030\024 \001(\t:\nexpand.tx"
  "t\022\031\n\nwith_box3d\030) \001(\010:\005false\022\031\n\nwith_frb"
  "ox\030* \001(\010:\005false\022\032\n\013with_lights\030+ \001(\010:\005fa"
  "lse\022\032\n\013with_ratios\030, \001(\010:\005false\022\024\n\tnum_a"
  "reas\030. \001(\005:\0010\022\032\n\014border_ratio\030- \001(\002:\0040.0"
  "1\"\311\n\n\014NetworkParam\022\'\n\rdet1_loc_blob\030\001 \001("
  "\t:\020detect1_loc_pred\022\'\n\rdet1_obj_blob\030\002 \001"
  "(\t:\020detect1_obj_pred\022\'\n\rdet1_cls_blob\030\003 "
  "\001(\t:\020detect1_cls_pred\022\'\n\rdet1_ori_blob\030\004"
  " \001(\t:\020detect1_ori_pred\0221\n\022det1_ori_conf_"
  "blob\030\005 \001(\t:\025detect1_ori_conf_pred\022\'\n\rdet"
  "1_dim_blob\030\006 \001(\t:\020detect1_dim_pred\022\'\n\rde"
  "t2_loc_blob\030\007 \001(\t:\020detect2_loc_pred\022\'\n\rd"
  "et2_obj_blob\030\010 \001(\t:\020detect2_obj_pred\022\'\n\r"
  "det2_cls_blob\030\t \001(\t:\020detect2_cls_pred\022\'\n"
  "\rdet2_ori_blob\030\n \001(\t:\020detect2_ori_pred\0221"
  "\n\022det2_ori_conf_blob\030\013 \001(\t:\025detect2_ori_"
  "conf_pred\022\'\n\rdet2_dim_blob\030\014 \001(\t:\020detect"
  "2_dim_pred\022\'\n\rdet3_loc_blob\030\r \001(\t:\020detec"
  "t3_loc_pred\022\'\n\rdet3_obj_blob\030\016 \001(\t:\020dete"
  "ct3_obj_pred\022\'\n\rdet3_cls_blob\030\017 \001(\t:\020det"
  "ect3_cls_pred\022\'\n\rdet3_ori_blob\030\020 \001(\t:\020de"
  "tect3_ori_pred\0221\n\022det3_ori_conf_blob\030\021 \001"
  "(\t:\025detect3_ori_conf_pred\022\'\n\rdet3_dim_bl"
  "ob\030\022 \001(\t:\020detect3_dim_pred\022\032\n\010lof_blob\030\023"
  " \001(\t:\010lof_pred\022\032\n\010lor_blob\030\024 \001(\t:\010lor_pr"
  "ed\022\035\n\017input_data_blob\030# \001(\t:\004data\022\037\n\020inp"
  "ut_ratio_blob\030$ \001(\t:\005ratio\022\035\n\022input_inst"
  "ric_blob\030% \001(\t:\001K\022\034\n\trois_blob\030\026 \001(\t:\tro"
  "is_pred\022\034\n\tfeat_blob\030\027 \001(\t:\tconv_feat\022\032\n"
  "\010box_blob\030\030 \001(\t:\010box_pred\022\032\n\010iou_blob\030\031 "
  "\001(\t:\010iou_pred\022\036\n\nbrvis_blob\030\032 \001(\t:\nbrvis"
  "_pred\022\036\n\nbrswt_blob\030\033 \001(\t:\nbrswt_pred\022\036\n"
  "\nltvis_blob\030\034 \001(\t:\nltvis_pred\022\036\n\nltswt_b"
  "lob\030\035 \001(\t:\nltswt_pred\022\036\n\nrtvis_blob\030\036 \001("
  "\t:\nrtvis_pred\022\036\n\nrtswt_blob\030\037 \001(\t:\nrtswt"
  "_pred\022\"\n\014area_id_blob\030  \001(\t:\014area_id_pre"
  "d\022$\n\022visible_ratio_blob\030! \001(\t:\010vis_pred\022"
  "$\n\022cut_off_ratio_blob\030\" \001(\t:\010cut_pred\"\224\001"
  "\n\010NMSParam\022\027\n\004type\030\001 \001(\t:\tNormalNMS\022\026\n\tt"
  "hreshold\030\002 \001(\002:\0030.4\022\022\n\005sigma\030\003 \001(\002:\0030.4\022"
  "\"\n\025inter_cls_conf_thresh\030\004 \001(\002:\0030.1\022\037\n\024i"
  "nter_cls_nms_thresh\030\005 \001(\002:\0011\"+\n\016BBoxStat"
  "istics\022\014\n\004mean\030\001 \003(\002\022\013\n\003std\030\002 \003(\002\"\204\001\n\023Di"
  "mensionStatistics\022\021\n\006mean_h\030\001 \001(\002:\0010\022\021\n\006"
  "mean_w\030\002 \001(\002:\0010\022\021\n\006mean_l\030\003 \001(\002:\0010\022\020\n\005st"
  "d_h\030\004 \001(\002:\0011\022\020\n\005std_w\030\005 \001(\002:\0011\022\020\n\005std_l\030"
  "\006 \001(\002:\0011"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_smoke_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_smoke_2eproto_sccs[6] = {
  &scc_info_BBoxStatistics_smoke_2eproto.base,
  &scc_info_DimensionStatistics_smoke_2eproto.base,
  &scc_info_ModelParam_smoke_2eproto.base,
  &scc_info_NMSParam_smoke_2eproto.base,
  &scc_info_NetworkParam_smoke_2eproto.base,
  &scc_info_SmokeParam_smoke_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_smoke_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smoke_2eproto = {
  false, false, descriptor_table_protodef_smoke_2eproto, "smoke.proto", 3168,
  &descriptor_table_smoke_2eproto_once, descriptor_table_smoke_2eproto_sccs, descriptor_table_smoke_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_smoke_2eproto::offsets,
  file_level_metadata_smoke_2eproto, 6, file_level_enum_descriptors_smoke_2eproto, file_level_service_descriptors_smoke_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_smoke_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_smoke_2eproto)), true);
namespace apollo {
namespace perception {
namespace camera {
namespace smoke {

// ===================================================================

class SmokeParam::_Internal {
 public:
  using HasBits = decltype(std::declval<SmokeParam>()._has_bits_);
  static const ::apollo::perception::camera::smoke::ModelParam& model_param(const SmokeParam* msg);
  static void set_has_model_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::smoke::NetworkParam& net_param(const SmokeParam* msg);
  static void set_has_net_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::smoke::NMSParam& nms_param(const SmokeParam* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::camera::smoke::ModelParam&
SmokeParam::_Internal::model_param(const SmokeParam* msg) {
  return *msg->model_param_;
}
const ::apollo::perception::camera::smoke::NetworkParam&
SmokeParam::_Internal::net_param(const SmokeParam* msg) {
  return *msg->net_param_;
}
const ::apollo::perception::camera::smoke::NMSParam&
SmokeParam::_Internal::nms_param(const SmokeParam* msg) {
  return *msg->nms_param_;
}
SmokeParam::SmokeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.SmokeParam)
}
SmokeParam::SmokeParam(const SmokeParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_model_param()) {
    model_param_ = new ::apollo::perception::camera::smoke::ModelParam(*from.model_param_);
  } else {
    model_param_ = nullptr;
  }
  if (from._internal_has_net_param()) {
    net_param_ = new ::apollo::perception::camera::smoke::NetworkParam(*from.net_param_);
  } else {
    net_param_ = nullptr;
  }
  if (from._internal_has_nms_param()) {
    nms_param_ = new ::apollo::perception::camera::smoke::NMSParam(*from.nms_param_);
  } else {
    nms_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.SmokeParam)
}

void SmokeParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmokeParam_smoke_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&model_param_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nms_param_) -
      reinterpret_cast<char*>(&model_param_)) + sizeof(nms_param_));
}

SmokeParam::~SmokeParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.SmokeParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SmokeParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete model_param_;
  if (this != internal_default_instance()) delete net_param_;
  if (this != internal_default_instance()) delete nms_param_;
}

void SmokeParam::ArenaDtor(void* object) {
  SmokeParam* _this = reinterpret_cast< SmokeParam* >(object);
  (void)_this;
}
void SmokeParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmokeParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmokeParam& SmokeParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmokeParam_smoke_2eproto.base);
  return *internal_default_instance();
}


void SmokeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.SmokeParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(model_param_ != nullptr);
      model_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(net_param_ != nullptr);
      net_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nms_param_ != nullptr);
      nms_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmokeParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.smoke.ModelParam model_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.smoke.NetworkParam net_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.smoke.NMSParam nms_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmokeParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.SmokeParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.smoke.ModelParam model_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model_param(this), target, stream);
  }

  // optional .apollo.perception.camera.smoke.NetworkParam net_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::net_param(this), target, stream);
  }

  // optional .apollo.perception.camera.smoke.NMSParam nms_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nms_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.SmokeParam)
  return target;
}

size_t SmokeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.SmokeParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.camera.smoke.ModelParam model_param = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_param_);
    }

    // optional .apollo.perception.camera.smoke.NetworkParam net_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *net_param_);
    }

    // optional .apollo.perception.camera.smoke.NMSParam nms_param = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nms_param_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmokeParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.smoke.SmokeParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SmokeParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmokeParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.smoke.SmokeParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.smoke.SmokeParam)
    MergeFrom(*source);
  }
}

void SmokeParam::MergeFrom(const SmokeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.SmokeParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_param()->::apollo::perception::camera::smoke::ModelParam::MergeFrom(from._internal_model_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_net_param()->::apollo::perception::camera::smoke::NetworkParam::MergeFrom(from._internal_net_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_nms_param()->::apollo::perception::camera::smoke::NMSParam::MergeFrom(from._internal_nms_param());
    }
  }
}

void SmokeParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.smoke.SmokeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmokeParam::CopyFrom(const SmokeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.SmokeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmokeParam::IsInitialized() const {
  return true;
}

void SmokeParam::InternalSwap(SmokeParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmokeParam, nms_param_)
      + sizeof(SmokeParam::nms_param_)
      - PROTOBUF_FIELD_OFFSET(SmokeParam, model_param_)>(
          reinterpret_cast<char*>(&model_param_),
          reinterpret_cast<char*>(&other->model_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmokeParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelParam>()._has_bits_);
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proto_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stage1_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stage1_md(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stage2_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_stage2_md(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_anchors_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_types_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_feature_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_cropped_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_resized_width(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_aligned_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_light_vis_conf_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_light_swt_conf_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_roi_conf_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_box_conf_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_stage2_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_min_2d_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_3d_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_min_3d_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_min_3d_length(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_calibratetable_root(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ori_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_per_cls_reg(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_expand_file(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_with_box3d(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_with_frbox(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_with_lights(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_with_ratios(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_num_areas(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_border_ratio(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_model_name_{{{"yolo-2d", 7}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_proto_file_{{{"caffe.pt", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_weight_file_{{{"caffe.model", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_{{{"caffe.pt", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_{{{"caffe.model", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_{{{"caffe.pt", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_{{{"caffe.model", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_{{{"anchors.txt", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_types_file_{{{"types.txt", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_feature_file_{{{"feature.pt", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_{{{"./", 2}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_model_type_{{{"CaffeNet", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::_i_give_permission_to_break_this_code_default_expand_file_{{{"expand.txt", 10}}, {nullptr}};
ModelParam::ModelParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dimension_statistics_(arena),
  bbox_statistics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.ModelParam)
}
ModelParam::ModelParam(const ModelParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dimension_statistics_(from.dimension_statistics_),
      bbox_statistics_(from.bbox_statistics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_model_name()) {
    model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_model_name(), 
      GetArena());
  }
  proto_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_proto_file()) {
    proto_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_proto_file(), 
      GetArena());
  }
  weight_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_weight_file()) {
    weight_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_weight_file(), 
      GetArena());
  }
  anchors_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_anchors_file()) {
    anchors_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_anchors_file(), 
      GetArena());
  }
  types_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_types_file()) {
    types_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_types_file(), 
      GetArena());
  }
  feature_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_feature_file()) {
    feature_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_feature_file(), 
      GetArena());
  }
  calibratetable_root_.UnsafeSetDefault(nullptr);
  if (from._internal_has_calibratetable_root()) {
    calibratetable_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_calibratetable_root(), 
      GetArena());
  }
  model_type_.UnsafeSetDefault(nullptr);
  if (from._internal_has_model_type()) {
    model_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_model_type(), 
      GetArena());
  }
  expand_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_expand_file()) {
    expand_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_expand_file(), 
      GetArena());
  }
  stage1_pt_.UnsafeSetDefault(nullptr);
  if (from._internal_has_stage1_pt()) {
    stage1_pt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_stage1_pt(), 
      GetArena());
  }
  stage1_md_.UnsafeSetDefault(nullptr);
  if (from._internal_has_stage1_md()) {
    stage1_md_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_stage1_md(), 
      GetArena());
  }
  stage2_pt_.UnsafeSetDefault(nullptr);
  if (from._internal_has_stage2_pt()) {
    stage2_pt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_stage2_pt(), 
      GetArena());
  }
  stage2_md_.UnsafeSetDefault(nullptr);
  if (from._internal_has_stage2_md()) {
    stage2_md_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_stage2_md(), 
      GetArena());
  }
  ::memcpy(&min_2d_height_, &from.min_2d_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&border_ratio_) -
    reinterpret_cast<char*>(&min_2d_height_)) + sizeof(border_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.ModelParam)
}

void ModelParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelParam_smoke_2eproto.base);
  model_name_.UnsafeSetDefault(nullptr);
  proto_file_.UnsafeSetDefault(nullptr);
  weight_file_.UnsafeSetDefault(nullptr);
  anchors_file_.UnsafeSetDefault(nullptr);
  types_file_.UnsafeSetDefault(nullptr);
  feature_file_.UnsafeSetDefault(nullptr);
  calibratetable_root_.UnsafeSetDefault(nullptr);
  model_type_.UnsafeSetDefault(nullptr);
  expand_file_.UnsafeSetDefault(nullptr);
  stage1_pt_.UnsafeSetDefault(nullptr);
  stage1_md_.UnsafeSetDefault(nullptr);
  stage2_pt_.UnsafeSetDefault(nullptr);
  stage2_md_.UnsafeSetDefault(nullptr);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&min_2d_height_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_areas_) -
      reinterpret_cast<char*>(&min_2d_height_)) + sizeof(num_areas_));
  offset_ratio_ = 0.288889f;
  confidence_threshold_ = 0.1f;
  cropped_ratio_ = 0.711111f;
  resized_width_ = 1440;
  aligned_pixel_ = 32;
  ori_cycle_ = 1;
  roi_conf_threshold_ = 0.1f;
  box_conf_threshold_ = 0.5f;
  stage2_nms_threshold_ = 0.4f;
  light_vis_conf_threshold_ = 0.5f;
  light_swt_conf_threshold_ = 0.5f;
  border_ratio_ = 0.01f;
}

ModelParam::~ModelParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.ModelParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_name_.DestroyNoArena(nullptr);
  proto_file_.DestroyNoArena(nullptr);
  weight_file_.DestroyNoArena(nullptr);
  anchors_file_.DestroyNoArena(nullptr);
  types_file_.DestroyNoArena(nullptr);
  feature_file_.DestroyNoArena(nullptr);
  calibratetable_root_.DestroyNoArena(nullptr);
  model_type_.DestroyNoArena(nullptr);
  expand_file_.DestroyNoArena(nullptr);
  stage1_pt_.DestroyNoArena(nullptr);
  stage1_md_.DestroyNoArena(nullptr);
  stage2_pt_.DestroyNoArena(nullptr);
  stage2_md_.DestroyNoArena(nullptr);
}

void ModelParam::ArenaDtor(void* object) {
  ModelParam* _this = reinterpret_cast< ModelParam* >(object);
  (void)_this;
}
void ModelParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelParam& ModelParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelParam_smoke_2eproto.base);
  return *internal_default_instance();
}


void ModelParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.ModelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_statistics_.Clear();
  bbox_statistics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      model_name_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_model_name_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      proto_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_, GetArena());
       }
    if (cached_has_bits & 0x00000004u) {
      weight_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_, GetArena());
       }
    if (cached_has_bits & 0x00000008u) {
      anchors_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_, GetArena());
       }
    if (cached_has_bits & 0x00000010u) {
      types_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_types_file_, GetArena());
       }
    if (cached_has_bits & 0x00000020u) {
      feature_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_, GetArena());
       }
    if (cached_has_bits & 0x00000040u) {
      calibratetable_root_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_, GetArena());
       }
    if (cached_has_bits & 0x00000080u) {
      model_type_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_model_type_, GetArena());
       }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      expand_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_, GetArena());
       }
    if (cached_has_bits & 0x00000200u) {
      stage1_pt_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_, GetArena());
       }
    if (cached_has_bits & 0x00000400u) {
      stage1_md_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_, GetArena());
       }
    if (cached_has_bits & 0x00000800u) {
      stage2_pt_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_, GetArena());
       }
    if (cached_has_bits & 0x00001000u) {
      stage2_md_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_, GetArena());
       }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&min_2d_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_3d_width_) -
        reinterpret_cast<char*>(&min_2d_height_)) + sizeof(min_3d_width_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&min_3d_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_areas_) -
        reinterpret_cast<char*>(&min_3d_length_)) + sizeof(num_areas_));
    offset_ratio_ = 0.288889f;
  }
  if (cached_has_bits & 0xff000000u) {
    confidence_threshold_ = 0.1f;
    cropped_ratio_ = 0.711111f;
    resized_width_ = 1440;
    aligned_pixel_ = 32;
    ori_cycle_ = 1;
    roi_conf_threshold_ = 0.1f;
    box_conf_threshold_ = 0.5f;
    stage2_nms_threshold_ = 0.4f;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    light_vis_conf_threshold_ = 0.5f;
    light_swt_conf_threshold_ = 0.5f;
    border_ratio_ = 0.01f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string model_name = 1 [default = "yolo-2d"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.model_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proto_file = 2 [default = "caffe.pt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proto_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.proto_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string weight_file = 3 [default = "caffe.model"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_weight_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.weight_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string anchors_file = 4 [default = "anchors.txt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_anchors_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.anchors_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string types_file = 5 [default = "types.txt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_types_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.types_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string feature_file = 6 [default = "feature.pt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_feature_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.feature_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float offset_ratio = 7 [default = 0.288889];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_offset_ratio(&_has_bits_);
          offset_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float confidence_threshold = 8 [default = 0.1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_confidence_threshold(&_has_bits_);
          confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_2d_height = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_min_2d_height(&_has_bits_);
          min_2d_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string calibratetable_root = 11 [default = "./"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_calibratetable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.calibratetable_root");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string model_type = 12 [default = "CaffeNet"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.model_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cropped_ratio = 13 [default = 0.711111];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_cropped_ratio(&_has_bits_);
          cropped_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 resized_width = 14 [default = 1440];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_resized_width(&_has_bits_);
          resized_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 aligned_pixel = 15 [default = 32];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_aligned_pixel(&_has_bits_);
          aligned_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ori_cycle = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_ori_cycle(&_has_bits_);
          ori_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool per_cls_reg = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_per_cls_reg(&_has_bits_);
          per_cls_reg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.smoke.DimensionStatistics dimension_statistics = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dimension_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.smoke.BBoxStatistics bbox_statistics = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bbox_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string expand_file = 20 [default = "expand.txt"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_expand_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.expand_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stage1_pt = 21 [default = "caffe.pt"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_stage1_pt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage1_pt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stage1_md = 22 [default = "caffe.model"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_stage1_md();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage1_md");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stage2_pt = 23 [default = "caffe.pt"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_stage2_pt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage2_pt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stage2_md = 24 [default = "caffe.model"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_stage2_md();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage2_md");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float roi_conf_threshold = 25 [default = 0.1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_roi_conf_threshold(&_has_bits_);
          roi_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float box_conf_threshold = 26 [default = 0.5];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_box_conf_threshold(&_has_bits_);
          box_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stage2_nms_threshold = 27 [default = 0.4];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_stage2_nms_threshold(&_has_bits_);
          stage2_nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_3d_height = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_min_3d_height(&_has_bits_);
          min_3d_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_3d_width = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_min_3d_width(&_has_bits_);
          min_3d_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_3d_length = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_min_3d_length(&_has_bits_);
          min_3d_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float light_vis_conf_threshold = 33 [default = 0.5];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_light_vis_conf_threshold(&_has_bits_);
          light_vis_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float light_swt_conf_threshold = 34 [default = 0.5];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_light_swt_conf_threshold(&_has_bits_);
          light_swt_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool with_box3d = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_with_box3d(&_has_bits_);
          with_box3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool with_frbox = 42 [default = false];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_with_frbox(&_has_bits_);
          with_frbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool with_lights = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_with_lights(&_has_bits_);
          with_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool with_ratios = 44 [default = false];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_with_ratios(&_has_bits_);
          with_ratios_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float border_ratio = 45 [default = 0.01];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_border_ratio(&_has_bits_);
          border_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 num_areas = 46 [default = 0];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_num_areas(&_has_bits_);
          num_areas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.ModelParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model_name = 1 [default = "yolo-2d"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // optional string proto_file = 2 [default = "caffe.pt"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_file().data(), static_cast<int>(this->_internal_proto_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.proto_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto_file(), target);
  }

  // optional string weight_file = 3 [default = "caffe.model"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_weight_file().data(), static_cast<int>(this->_internal_weight_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.weight_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_weight_file(), target);
  }

  // optional string anchors_file = 4 [default = "anchors.txt"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anchors_file().data(), static_cast<int>(this->_internal_anchors_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.anchors_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_anchors_file(), target);
  }

  // optional string types_file = 5 [default = "types.txt"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_types_file().data(), static_cast<int>(this->_internal_types_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.types_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_types_file(), target);
  }

  // optional string feature_file = 6 [default = "feature.pt"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_feature_file().data(), static_cast<int>(this->_internal_feature_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.feature_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_feature_file(), target);
  }

  // optional float offset_ratio = 7 [default = 0.288889];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_offset_ratio(), target);
  }

  // optional float confidence_threshold = 8 [default = 0.1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_confidence_threshold(), target);
  }

  // optional float min_2d_height = 9 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_min_2d_height(), target);
  }

  // optional string calibratetable_root = 11 [default = "./"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibratetable_root().data(), static_cast<int>(this->_internal_calibratetable_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.calibratetable_root");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_calibratetable_root(), target);
  }

  // optional string model_type = 12 [default = "CaffeNet"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.model_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_model_type(), target);
  }

  // optional float cropped_ratio = 13 [default = 0.711111];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_cropped_ratio(), target);
  }

  // optional int32 resized_width = 14 [default = 1440];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_resized_width(), target);
  }

  // optional int32 aligned_pixel = 15 [default = 32];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_aligned_pixel(), target);
  }

  // optional int32 ori_cycle = 16 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_ori_cycle(), target);
  }

  // optional bool per_cls_reg = 17 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_per_cls_reg(), target);
  }

  // repeated .apollo.perception.camera.smoke.DimensionStatistics dimension_statistics = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dimension_statistics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_dimension_statistics(i), target, stream);
  }

  // repeated .apollo.perception.camera.smoke.BBoxStatistics bbox_statistics = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bbox_statistics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_bbox_statistics(i), target, stream);
  }

  // optional string expand_file = 20 [default = "expand.txt"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_expand_file().data(), static_cast<int>(this->_internal_expand_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.expand_file");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_expand_file(), target);
  }

  // optional string stage1_pt = 21 [default = "caffe.pt"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage1_pt().data(), static_cast<int>(this->_internal_stage1_pt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage1_pt");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_stage1_pt(), target);
  }

  // optional string stage1_md = 22 [default = "caffe.model"];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage1_md().data(), static_cast<int>(this->_internal_stage1_md().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage1_md");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_stage1_md(), target);
  }

  // optional string stage2_pt = 23 [default = "caffe.pt"];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage2_pt().data(), static_cast<int>(this->_internal_stage2_pt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage2_pt");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_stage2_pt(), target);
  }

  // optional string stage2_md = 24 [default = "caffe.model"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage2_md().data(), static_cast<int>(this->_internal_stage2_md().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage2_md");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_stage2_md(), target);
  }

  // optional float roi_conf_threshold = 25 [default = 0.1];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_roi_conf_threshold(), target);
  }

  // optional float box_conf_threshold = 26 [default = 0.5];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_box_conf_threshold(), target);
  }

  // optional float stage2_nms_threshold = 27 [default = 0.4];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_stage2_nms_threshold(), target);
  }

  // optional float min_3d_height = 30 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_min_3d_height(), target);
  }

  // optional float min_3d_width = 31 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_min_3d_width(), target);
  }

  // optional float min_3d_length = 32 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_min_3d_length(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float light_vis_conf_threshold = 33 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_light_vis_conf_threshold(), target);
  }

  // optional float light_swt_conf_threshold = 34 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_light_swt_conf_threshold(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool with_box3d = 41 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_with_box3d(), target);
  }

  // optional bool with_frbox = 42 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_with_frbox(), target);
  }

  // optional bool with_lights = 43 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_with_lights(), target);
  }

  // optional bool with_ratios = 44 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_with_ratios(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float border_ratio = 45 [default = 0.01];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_border_ratio(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_areas = 46 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_num_areas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.ModelParam)
  return target;
}

size_t ModelParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.ModelParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.smoke.DimensionStatistics dimension_statistics = 18;
  total_size += 2UL * this->_internal_dimension_statistics_size();
  for (const auto& msg : this->dimension_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.smoke.BBoxStatistics bbox_statistics = 19;
  total_size += 2UL * this->_internal_bbox_statistics_size();
  for (const auto& msg : this->bbox_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_name = 1 [default = "yolo-2d"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
    }

    // optional string proto_file = 2 [default = "caffe.pt"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_file());
    }

    // optional string weight_file = 3 [default = "caffe.model"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weight_file());
    }

    // optional string anchors_file = 4 [default = "anchors.txt"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anchors_file());
    }

    // optional string types_file = 5 [default = "types.txt"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_types_file());
    }

    // optional string feature_file = 6 [default = "feature.pt"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feature_file());
    }

    // optional string calibratetable_root = 11 [default = "./"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibratetable_root());
    }

    // optional string model_type = 12 [default = "CaffeNet"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string expand_file = 20 [default = "expand.txt"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_expand_file());
    }

    // optional string stage1_pt = 21 [default = "caffe.pt"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage1_pt());
    }

    // optional string stage1_md = 22 [default = "caffe.model"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage1_md());
    }

    // optional string stage2_pt = 23 [default = "caffe.pt"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage2_pt());
    }

    // optional string stage2_md = 24 [default = "caffe.model"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage2_md());
    }

    // optional float min_2d_height = 9 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float min_3d_height = 30 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float min_3d_width = 31 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float min_3d_length = 32 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool per_cls_reg = 17 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool with_box3d = 41 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool with_frbox = 42 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool with_lights = 43 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool with_ratios = 44 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 num_areas = 46 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_areas());
    }

    // optional float offset_ratio = 7 [default = 0.288889];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float confidence_threshold = 8 [default = 0.1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional float cropped_ratio = 13 [default = 0.711111];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 4;
    }

    // optional int32 resized_width = 14 [default = 1440];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_resized_width());
    }

    // optional int32 aligned_pixel = 15 [default = 32];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_aligned_pixel());
    }

    // optional int32 ori_cycle = 16 [default = 1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ori_cycle());
    }

    // optional float roi_conf_threshold = 25 [default = 0.1];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float box_conf_threshold = 26 [default = 0.5];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float stage2_nms_threshold = 27 [default = 0.4];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional float light_vis_conf_threshold = 33 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float light_swt_conf_threshold = 34 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float border_ratio = 45 [default = 0.01];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.smoke.ModelParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.smoke.ModelParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.smoke.ModelParam)
    MergeFrom(*source);
  }
}

void ModelParam::MergeFrom(const ModelParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.ModelParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_statistics_.MergeFrom(from.dimension_statistics_);
  bbox_statistics_.MergeFrom(from.bbox_statistics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto_file(from._internal_proto_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_weight_file(from._internal_weight_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_anchors_file(from._internal_anchors_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_types_file(from._internal_types_file());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_feature_file(from._internal_feature_file());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_calibratetable_root(from._internal_calibratetable_root());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_model_type(from._internal_model_type());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_expand_file(from._internal_expand_file());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_stage1_pt(from._internal_stage1_pt());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_stage1_md(from._internal_stage1_md());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_stage2_pt(from._internal_stage2_pt());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_stage2_md(from._internal_stage2_md());
    }
    if (cached_has_bits & 0x00002000u) {
      min_2d_height_ = from.min_2d_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_3d_height_ = from.min_3d_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      min_3d_width_ = from.min_3d_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      min_3d_length_ = from.min_3d_length_;
    }
    if (cached_has_bits & 0x00020000u) {
      per_cls_reg_ = from.per_cls_reg_;
    }
    if (cached_has_bits & 0x00040000u) {
      with_box3d_ = from.with_box3d_;
    }
    if (cached_has_bits & 0x00080000u) {
      with_frbox_ = from.with_frbox_;
    }
    if (cached_has_bits & 0x00100000u) {
      with_lights_ = from.with_lights_;
    }
    if (cached_has_bits & 0x00200000u) {
      with_ratios_ = from.with_ratios_;
    }
    if (cached_has_bits & 0x00400000u) {
      num_areas_ = from.num_areas_;
    }
    if (cached_has_bits & 0x00800000u) {
      offset_ratio_ = from.offset_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    if (cached_has_bits & 0x02000000u) {
      cropped_ratio_ = from.cropped_ratio_;
    }
    if (cached_has_bits & 0x04000000u) {
      resized_width_ = from.resized_width_;
    }
    if (cached_has_bits & 0x08000000u) {
      aligned_pixel_ = from.aligned_pixel_;
    }
    if (cached_has_bits & 0x10000000u) {
      ori_cycle_ = from.ori_cycle_;
    }
    if (cached_has_bits & 0x20000000u) {
      roi_conf_threshold_ = from.roi_conf_threshold_;
    }
    if (cached_has_bits & 0x40000000u) {
      box_conf_threshold_ = from.box_conf_threshold_;
    }
    if (cached_has_bits & 0x80000000u) {
      stage2_nms_threshold_ = from.stage2_nms_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      light_vis_conf_threshold_ = from.light_vis_conf_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      light_swt_conf_threshold_ = from.light_swt_conf_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      border_ratio_ = from.border_ratio_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ModelParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.smoke.ModelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParam::CopyFrom(const ModelParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.ModelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParam::IsInitialized() const {
  return true;
}

void ModelParam::InternalSwap(ModelParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  dimension_statistics_.InternalSwap(&other->dimension_statistics_);
  bbox_statistics_.InternalSwap(&other->bbox_statistics_);
  model_name_.Swap(&other->model_name_, nullptr, GetArena());
  proto_file_.Swap(&other->proto_file_, nullptr, GetArena());
  weight_file_.Swap(&other->weight_file_, nullptr, GetArena());
  anchors_file_.Swap(&other->anchors_file_, nullptr, GetArena());
  types_file_.Swap(&other->types_file_, nullptr, GetArena());
  feature_file_.Swap(&other->feature_file_, nullptr, GetArena());
  calibratetable_root_.Swap(&other->calibratetable_root_, nullptr, GetArena());
  model_type_.Swap(&other->model_type_, nullptr, GetArena());
  expand_file_.Swap(&other->expand_file_, nullptr, GetArena());
  stage1_pt_.Swap(&other->stage1_pt_, nullptr, GetArena());
  stage1_md_.Swap(&other->stage1_md_, nullptr, GetArena());
  stage2_pt_.Swap(&other->stage2_pt_, nullptr, GetArena());
  stage2_md_.Swap(&other->stage2_md_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelParam, num_areas_)
      + sizeof(ModelParam::num_areas_)
      - PROTOBUF_FIELD_OFFSET(ModelParam, min_2d_height_)>(
          reinterpret_cast<char*>(&min_2d_height_),
          reinterpret_cast<char*>(&other->min_2d_height_));
  swap(offset_ratio_, other->offset_ratio_);
  swap(confidence_threshold_, other->confidence_threshold_);
  swap(cropped_ratio_, other->cropped_ratio_);
  swap(resized_width_, other->resized_width_);
  swap(aligned_pixel_, other->aligned_pixel_);
  swap(ori_cycle_, other->ori_cycle_);
  swap(roi_conf_threshold_, other->roi_conf_threshold_);
  swap(box_conf_threshold_, other->box_conf_threshold_);
  swap(stage2_nms_threshold_, other->stage2_nms_threshold_);
  swap(light_vis_conf_threshold_, other->light_vis_conf_threshold_);
  swap(light_swt_conf_threshold_, other->light_swt_conf_threshold_);
  swap(border_ratio_, other->border_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkParam>()._has_bits_);
  static void set_has_det1_loc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_det1_obj_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_det1_cls_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_det1_ori_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_det1_ori_conf_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_det1_dim_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_det2_loc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_det2_obj_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_det2_cls_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_det2_ori_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_det2_ori_conf_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_det2_dim_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_det3_loc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_det3_obj_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_det3_cls_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_det3_ori_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_det3_ori_conf_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_det3_dim_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lof_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lor_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_input_data_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_input_ratio_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_input_instric_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_rois_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_feat_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_box_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_iou_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_brvis_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_brswt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ltvis_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ltswt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_rtvis_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_rtswt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_area_id_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_visible_ratio_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_cut_off_ratio_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_{{{"detect1_loc_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_{{{"detect1_obj_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_{{{"detect1_cls_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_{{{"detect1_ori_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_{{{"detect1_ori_conf_pred", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_{{{"detect1_dim_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_{{{"detect2_loc_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_{{{"detect2_obj_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_{{{"detect2_cls_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_{{{"detect2_ori_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_{{{"detect2_ori_conf_pred", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_{{{"detect2_dim_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_{{{"detect3_loc_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_{{{"detect3_obj_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_{{{"detect3_cls_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_{{{"detect3_ori_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_{{{"detect3_ori_conf_pred", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_{{{"detect3_dim_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_{{{"lof_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_{{{"lor_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_input_data_blob_{{{"data", 4}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_input_ratio_blob_{{{"ratio", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_input_instric_blob_{{{"K", 1}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_{{{"rois_pred", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_{{{"conv_feat", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_{{{"box_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_{{{"iou_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_{{{"brvis_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_{{{"brswt_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_{{{"ltvis_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_{{{"ltswt_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_{{{"rtvis_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_{{{"rtswt_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_{{{"area_id_pred", 12}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_{{{"vis_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_{{{"cut_pred", 8}}, {nullptr}};
NetworkParam::NetworkParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.NetworkParam)
}
NetworkParam::NetworkParam(const NetworkParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  det1_loc_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det1_loc_blob()) {
    det1_loc_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det1_loc_blob(), 
      GetArena());
  }
  det1_obj_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det1_obj_blob()) {
    det1_obj_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det1_obj_blob(), 
      GetArena());
  }
  det1_cls_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det1_cls_blob()) {
    det1_cls_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det1_cls_blob(), 
      GetArena());
  }
  det1_ori_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det1_ori_blob()) {
    det1_ori_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det1_ori_blob(), 
      GetArena());
  }
  det1_ori_conf_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det1_ori_conf_blob()) {
    det1_ori_conf_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det1_ori_conf_blob(), 
      GetArena());
  }
  det1_dim_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det1_dim_blob()) {
    det1_dim_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det1_dim_blob(), 
      GetArena());
  }
  det2_loc_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det2_loc_blob()) {
    det2_loc_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det2_loc_blob(), 
      GetArena());
  }
  det2_obj_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det2_obj_blob()) {
    det2_obj_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det2_obj_blob(), 
      GetArena());
  }
  det2_cls_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det2_cls_blob()) {
    det2_cls_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det2_cls_blob(), 
      GetArena());
  }
  det2_ori_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det2_ori_blob()) {
    det2_ori_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det2_ori_blob(), 
      GetArena());
  }
  det2_ori_conf_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det2_ori_conf_blob()) {
    det2_ori_conf_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det2_ori_conf_blob(), 
      GetArena());
  }
  det2_dim_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det2_dim_blob()) {
    det2_dim_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det2_dim_blob(), 
      GetArena());
  }
  det3_loc_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det3_loc_blob()) {
    det3_loc_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det3_loc_blob(), 
      GetArena());
  }
  det3_obj_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det3_obj_blob()) {
    det3_obj_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det3_obj_blob(), 
      GetArena());
  }
  det3_cls_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det3_cls_blob()) {
    det3_cls_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det3_cls_blob(), 
      GetArena());
  }
  det3_ori_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det3_ori_blob()) {
    det3_ori_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det3_ori_blob(), 
      GetArena());
  }
  det3_ori_conf_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det3_ori_conf_blob()) {
    det3_ori_conf_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det3_ori_conf_blob(), 
      GetArena());
  }
  det3_dim_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_det3_dim_blob()) {
    det3_dim_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_det3_dim_blob(), 
      GetArena());
  }
  lof_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_lof_blob()) {
    lof_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_lof_blob(), 
      GetArena());
  }
  lor_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_lor_blob()) {
    lor_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_lor_blob(), 
      GetArena());
  }
  rois_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_rois_blob()) {
    rois_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_rois_blob(), 
      GetArena());
  }
  feat_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_feat_blob()) {
    feat_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_feat_blob(), 
      GetArena());
  }
  box_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_box_blob()) {
    box_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_box_blob(), 
      GetArena());
  }
  iou_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_iou_blob()) {
    iou_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_iou_blob(), 
      GetArena());
  }
  brvis_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_brvis_blob()) {
    brvis_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_brvis_blob(), 
      GetArena());
  }
  brswt_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_brswt_blob()) {
    brswt_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_brswt_blob(), 
      GetArena());
  }
  ltvis_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_ltvis_blob()) {
    ltvis_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_ltvis_blob(), 
      GetArena());
  }
  ltswt_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_ltswt_blob()) {
    ltswt_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_ltswt_blob(), 
      GetArena());
  }
  rtvis_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_rtvis_blob()) {
    rtvis_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_rtvis_blob(), 
      GetArena());
  }
  rtswt_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_rtswt_blob()) {
    rtswt_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_rtswt_blob(), 
      GetArena());
  }
  area_id_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_area_id_blob()) {
    area_id_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_area_id_blob(), 
      GetArena());
  }
  visible_ratio_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_visible_ratio_blob()) {
    visible_ratio_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_visible_ratio_blob(), 
      GetArena());
  }
  cut_off_ratio_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_cut_off_ratio_blob()) {
    cut_off_ratio_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_cut_off_ratio_blob(), 
      GetArena());
  }
  input_data_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_input_data_blob()) {
    input_data_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_input_data_blob(), 
      GetArena());
  }
  input_ratio_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_input_ratio_blob()) {
    input_ratio_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_input_ratio_blob(), 
      GetArena());
  }
  input_instric_blob_.UnsafeSetDefault(nullptr);
  if (from._internal_has_input_instric_blob()) {
    input_instric_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_input_instric_blob(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.NetworkParam)
}

void NetworkParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkParam_smoke_2eproto.base);
  det1_loc_blob_.UnsafeSetDefault(nullptr);
  det1_obj_blob_.UnsafeSetDefault(nullptr);
  det1_cls_blob_.UnsafeSetDefault(nullptr);
  det1_ori_blob_.UnsafeSetDefault(nullptr);
  det1_ori_conf_blob_.UnsafeSetDefault(nullptr);
  det1_dim_blob_.UnsafeSetDefault(nullptr);
  det2_loc_blob_.UnsafeSetDefault(nullptr);
  det2_obj_blob_.UnsafeSetDefault(nullptr);
  det2_cls_blob_.UnsafeSetDefault(nullptr);
  det2_ori_blob_.UnsafeSetDefault(nullptr);
  det2_ori_conf_blob_.UnsafeSetDefault(nullptr);
  det2_dim_blob_.UnsafeSetDefault(nullptr);
  det3_loc_blob_.UnsafeSetDefault(nullptr);
  det3_obj_blob_.UnsafeSetDefault(nullptr);
  det3_cls_blob_.UnsafeSetDefault(nullptr);
  det3_ori_blob_.UnsafeSetDefault(nullptr);
  det3_ori_conf_blob_.UnsafeSetDefault(nullptr);
  det3_dim_blob_.UnsafeSetDefault(nullptr);
  lof_blob_.UnsafeSetDefault(nullptr);
  lor_blob_.UnsafeSetDefault(nullptr);
  rois_blob_.UnsafeSetDefault(nullptr);
  feat_blob_.UnsafeSetDefault(nullptr);
  box_blob_.UnsafeSetDefault(nullptr);
  iou_blob_.UnsafeSetDefault(nullptr);
  brvis_blob_.UnsafeSetDefault(nullptr);
  brswt_blob_.UnsafeSetDefault(nullptr);
  ltvis_blob_.UnsafeSetDefault(nullptr);
  ltswt_blob_.UnsafeSetDefault(nullptr);
  rtvis_blob_.UnsafeSetDefault(nullptr);
  rtswt_blob_.UnsafeSetDefault(nullptr);
  area_id_blob_.UnsafeSetDefault(nullptr);
  visible_ratio_blob_.UnsafeSetDefault(nullptr);
  cut_off_ratio_blob_.UnsafeSetDefault(nullptr);
  input_data_blob_.UnsafeSetDefault(nullptr);
  input_ratio_blob_.UnsafeSetDefault(nullptr);
  input_instric_blob_.UnsafeSetDefault(nullptr);
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.NetworkParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  det1_loc_blob_.DestroyNoArena(nullptr);
  det1_obj_blob_.DestroyNoArena(nullptr);
  det1_cls_blob_.DestroyNoArena(nullptr);
  det1_ori_blob_.DestroyNoArena(nullptr);
  det1_ori_conf_blob_.DestroyNoArena(nullptr);
  det1_dim_blob_.DestroyNoArena(nullptr);
  det2_loc_blob_.DestroyNoArena(nullptr);
  det2_obj_blob_.DestroyNoArena(nullptr);
  det2_cls_blob_.DestroyNoArena(nullptr);
  det2_ori_blob_.DestroyNoArena(nullptr);
  det2_ori_conf_blob_.DestroyNoArena(nullptr);
  det2_dim_blob_.DestroyNoArena(nullptr);
  det3_loc_blob_.DestroyNoArena(nullptr);
  det3_obj_blob_.DestroyNoArena(nullptr);
  det3_cls_blob_.DestroyNoArena(nullptr);
  det3_ori_blob_.DestroyNoArena(nullptr);
  det3_ori_conf_blob_.DestroyNoArena(nullptr);
  det3_dim_blob_.DestroyNoArena(nullptr);
  lof_blob_.DestroyNoArena(nullptr);
  lor_blob_.DestroyNoArena(nullptr);
  rois_blob_.DestroyNoArena(nullptr);
  feat_blob_.DestroyNoArena(nullptr);
  box_blob_.DestroyNoArena(nullptr);
  iou_blob_.DestroyNoArena(nullptr);
  brvis_blob_.DestroyNoArena(nullptr);
  brswt_blob_.DestroyNoArena(nullptr);
  ltvis_blob_.DestroyNoArena(nullptr);
  ltswt_blob_.DestroyNoArena(nullptr);
  rtvis_blob_.DestroyNoArena(nullptr);
  rtswt_blob_.DestroyNoArena(nullptr);
  area_id_blob_.DestroyNoArena(nullptr);
  visible_ratio_blob_.DestroyNoArena(nullptr);
  cut_off_ratio_blob_.DestroyNoArena(nullptr);
  input_data_blob_.DestroyNoArena(nullptr);
  input_ratio_blob_.DestroyNoArena(nullptr);
  input_instric_blob_.DestroyNoArena(nullptr);
}

void NetworkParam::ArenaDtor(void* object) {
  NetworkParam* _this = reinterpret_cast< NetworkParam* >(object);
  (void)_this;
}
void NetworkParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParam& NetworkParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParam_smoke_2eproto.base);
  return *internal_default_instance();
}


void NetworkParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.NetworkParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      det1_loc_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      det1_obj_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000004u) {
      det1_cls_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000008u) {
      det1_ori_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000010u) {
      det1_ori_conf_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000020u) {
      det1_dim_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000040u) {
      det2_loc_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000080u) {
      det2_obj_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_, GetArena());
       }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      det2_cls_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000200u) {
      det2_ori_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000400u) {
      det2_ori_conf_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000800u) {
      det2_dim_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_, GetArena());
       }
    if (cached_has_bits & 0x00001000u) {
      det3_loc_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_, GetArena());
       }
    if (cached_has_bits & 0x00002000u) {
      det3_obj_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_, GetArena());
       }
    if (cached_has_bits & 0x00004000u) {
      det3_cls_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_, GetArena());
       }
    if (cached_has_bits & 0x00008000u) {
      det3_ori_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_, GetArena());
       }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      det3_ori_conf_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_, GetArena());
       }
    if (cached_has_bits & 0x00020000u) {
      det3_dim_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_, GetArena());
       }
    if (cached_has_bits & 0x00040000u) {
      lof_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_, GetArena());
       }
    if (cached_has_bits & 0x00080000u) {
      lor_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_, GetArena());
       }
    if (cached_has_bits & 0x00100000u) {
      rois_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_, GetArena());
       }
    if (cached_has_bits & 0x00200000u) {
      feat_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_, GetArena());
       }
    if (cached_has_bits & 0x00400000u) {
      box_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_, GetArena());
       }
    if (cached_has_bits & 0x00800000u) {
      iou_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_, GetArena());
       }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      brvis_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_, GetArena());
       }
    if (cached_has_bits & 0x02000000u) {
      brswt_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_, GetArena());
       }
    if (cached_has_bits & 0x04000000u) {
      ltvis_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_, GetArena());
       }
    if (cached_has_bits & 0x08000000u) {
      ltswt_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_, GetArena());
       }
    if (cached_has_bits & 0x10000000u) {
      rtvis_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_, GetArena());
       }
    if (cached_has_bits & 0x20000000u) {
      rtswt_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_, GetArena());
       }
    if (cached_has_bits & 0x40000000u) {
      area_id_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_, GetArena());
       }
    if (cached_has_bits & 0x80000000u) {
      visible_ratio_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_, GetArena());
       }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cut_off_ratio_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      input_data_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_input_data_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000004u) {
      input_ratio_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_input_ratio_blob_, GetArena());
       }
    if (cached_has_bits & 0x00000008u) {
      input_instric_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::_i_give_permission_to_break_this_code_default_input_instric_blob_, GetArena());
       }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_det1_loc_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_loc_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_det1_obj_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_obj_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_det1_cls_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_cls_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_det1_ori_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_ori_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_det1_ori_conf_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_ori_conf_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_det1_dim_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_dim_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_det2_loc_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_loc_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_det2_obj_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_obj_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_det2_cls_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_cls_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_det2_ori_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_ori_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_det2_ori_conf_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_ori_conf_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_det2_dim_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_dim_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_det3_loc_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_loc_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_det3_obj_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_obj_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_det3_cls_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_cls_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_det3_ori_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_ori_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_det3_ori_conf_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_ori_conf_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_det3_dim_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_dim_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lof_blob = 19 [default = "lof_pred"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_lof_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.lof_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lor_blob = 20 [default = "lor_pred"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_lor_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.lor_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rois_blob = 22 [default = "rois_pred"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_rois_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.rois_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string feat_blob = 23 [default = "conv_feat"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_feat_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.feat_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string box_blob = 24 [default = "box_pred"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_box_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.box_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string iou_blob = 25 [default = "iou_pred"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_iou_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.iou_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string brvis_blob = 26 [default = "brvis_pred"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_brvis_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.brvis_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string brswt_blob = 27 [default = "brswt_pred"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_brswt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.brswt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ltvis_blob = 28 [default = "ltvis_pred"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_ltvis_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.ltvis_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ltswt_blob = 29 [default = "ltswt_pred"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_ltswt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.ltswt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rtvis_blob = 30 [default = "rtvis_pred"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_rtvis_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.rtvis_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rtswt_blob = 31 [default = "rtswt_pred"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_rtswt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.rtswt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string area_id_blob = 32 [default = "area_id_pred"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_area_id_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.area_id_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string visible_ratio_blob = 33 [default = "vis_pred"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_visible_ratio_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.visible_ratio_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cut_off_ratio_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.cut_off_ratio_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input_data_blob = 35 [default = "data"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_data_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.input_data_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input_ratio_blob = 36 [default = "ratio"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_input_ratio_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.input_ratio_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input_instric_blob = 37 [default = "K"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_input_instric_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.input_instric_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.NetworkParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_loc_blob().data(), static_cast<int>(this->_internal_det1_loc_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_loc_blob");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_det1_loc_blob(), target);
  }

  // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_obj_blob().data(), static_cast<int>(this->_internal_det1_obj_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_obj_blob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_det1_obj_blob(), target);
  }

  // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_cls_blob().data(), static_cast<int>(this->_internal_det1_cls_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_cls_blob");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_det1_cls_blob(), target);
  }

  // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_ori_blob().data(), static_cast<int>(this->_internal_det1_ori_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_ori_blob");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_det1_ori_blob(), target);
  }

  // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_ori_conf_blob().data(), static_cast<int>(this->_internal_det1_ori_conf_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_ori_conf_blob");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_det1_ori_conf_blob(), target);
  }

  // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_dim_blob().data(), static_cast<int>(this->_internal_det1_dim_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_dim_blob");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_det1_dim_blob(), target);
  }

  // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_loc_blob().data(), static_cast<int>(this->_internal_det2_loc_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_loc_blob");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_det2_loc_blob(), target);
  }

  // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_obj_blob().data(), static_cast<int>(this->_internal_det2_obj_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_obj_blob");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_det2_obj_blob(), target);
  }

  // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_cls_blob().data(), static_cast<int>(this->_internal_det2_cls_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_cls_blob");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_det2_cls_blob(), target);
  }

  // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_ori_blob().data(), static_cast<int>(this->_internal_det2_ori_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_ori_blob");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_det2_ori_blob(), target);
  }

  // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_ori_conf_blob().data(), static_cast<int>(this->_internal_det2_ori_conf_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_ori_conf_blob");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_det2_ori_conf_blob(), target);
  }

  // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_dim_blob().data(), static_cast<int>(this->_internal_det2_dim_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_dim_blob");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_det2_dim_blob(), target);
  }

  // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_loc_blob().data(), static_cast<int>(this->_internal_det3_loc_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_loc_blob");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_det3_loc_blob(), target);
  }

  // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_obj_blob().data(), static_cast<int>(this->_internal_det3_obj_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_obj_blob");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_det3_obj_blob(), target);
  }

  // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_cls_blob().data(), static_cast<int>(this->_internal_det3_cls_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_cls_blob");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_det3_cls_blob(), target);
  }

  // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_ori_blob().data(), static_cast<int>(this->_internal_det3_ori_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_ori_blob");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_det3_ori_blob(), target);
  }

  // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_ori_conf_blob().data(), static_cast<int>(this->_internal_det3_ori_conf_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_ori_conf_blob");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_det3_ori_conf_blob(), target);
  }

  // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_dim_blob().data(), static_cast<int>(this->_internal_det3_dim_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_dim_blob");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_det3_dim_blob(), target);
  }

  // optional string lof_blob = 19 [default = "lof_pred"];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lof_blob().data(), static_cast<int>(this->_internal_lof_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.lof_blob");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_lof_blob(), target);
  }

  // optional string lor_blob = 20 [default = "lor_pred"];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lor_blob().data(), static_cast<int>(this->_internal_lor_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.lor_blob");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_lor_blob(), target);
  }

  // optional string rois_blob = 22 [default = "rois_pred"];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rois_blob().data(), static_cast<int>(this->_internal_rois_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.rois_blob");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_rois_blob(), target);
  }

  // optional string feat_blob = 23 [default = "conv_feat"];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_feat_blob().data(), static_cast<int>(this->_internal_feat_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.feat_blob");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_feat_blob(), target);
  }

  // optional string box_blob = 24 [default = "box_pred"];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_box_blob().data(), static_cast<int>(this->_internal_box_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.box_blob");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_box_blob(), target);
  }

  // optional string iou_blob = 25 [default = "iou_pred"];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_iou_blob().data(), static_cast<int>(this->_internal_iou_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.iou_blob");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_iou_blob(), target);
  }

  // optional string brvis_blob = 26 [default = "brvis_pred"];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_brvis_blob().data(), static_cast<int>(this->_internal_brvis_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.brvis_blob");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_brvis_blob(), target);
  }

  // optional string brswt_blob = 27 [default = "brswt_pred"];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_brswt_blob().data(), static_cast<int>(this->_internal_brswt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.brswt_blob");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_brswt_blob(), target);
  }

  // optional string ltvis_blob = 28 [default = "ltvis_pred"];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ltvis_blob().data(), static_cast<int>(this->_internal_ltvis_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.ltvis_blob");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_ltvis_blob(), target);
  }

  // optional string ltswt_blob = 29 [default = "ltswt_pred"];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ltswt_blob().data(), static_cast<int>(this->_internal_ltswt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.ltswt_blob");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_ltswt_blob(), target);
  }

  // optional string rtvis_blob = 30 [default = "rtvis_pred"];
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rtvis_blob().data(), static_cast<int>(this->_internal_rtvis_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.rtvis_blob");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_rtvis_blob(), target);
  }

  // optional string rtswt_blob = 31 [default = "rtswt_pred"];
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rtswt_blob().data(), static_cast<int>(this->_internal_rtswt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.rtswt_blob");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_rtswt_blob(), target);
  }

  // optional string area_id_blob = 32 [default = "area_id_pred"];
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_area_id_blob().data(), static_cast<int>(this->_internal_area_id_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.area_id_blob");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_area_id_blob(), target);
  }

  // optional string visible_ratio_blob = 33 [default = "vis_pred"];
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visible_ratio_blob().data(), static_cast<int>(this->_internal_visible_ratio_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.visible_ratio_blob");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_visible_ratio_blob(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cut_off_ratio_blob().data(), static_cast<int>(this->_internal_cut_off_ratio_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.cut_off_ratio_blob");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_cut_off_ratio_blob(), target);
  }

  // optional string input_data_blob = 35 [default = "data"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_data_blob().data(), static_cast<int>(this->_internal_input_data_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.input_data_blob");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_input_data_blob(), target);
  }

  // optional string input_ratio_blob = 36 [default = "ratio"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_ratio_blob().data(), static_cast<int>(this->_internal_input_ratio_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.input_ratio_blob");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_input_ratio_blob(), target);
  }

  // optional string input_instric_blob = 37 [default = "K"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_instric_blob().data(), static_cast<int>(this->_internal_input_instric_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.input_instric_blob");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_input_instric_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.NetworkParam)
  return target;
}

size_t NetworkParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.NetworkParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_loc_blob());
    }

    // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_obj_blob());
    }

    // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_cls_blob());
    }

    // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_ori_blob());
    }

    // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_ori_conf_blob());
    }

    // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_dim_blob());
    }

    // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_loc_blob());
    }

    // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_obj_blob());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_cls_blob());
    }

    // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_ori_blob());
    }

    // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_ori_conf_blob());
    }

    // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_dim_blob());
    }

    // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_loc_blob());
    }

    // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_obj_blob());
    }

    // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_cls_blob());
    }

    // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_ori_blob());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_ori_conf_blob());
    }

    // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_dim_blob());
    }

    // optional string lof_blob = 19 [default = "lof_pred"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lof_blob());
    }

    // optional string lor_blob = 20 [default = "lor_pred"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lor_blob());
    }

    // optional string rois_blob = 22 [default = "rois_pred"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rois_blob());
    }

    // optional string feat_blob = 23 [default = "conv_feat"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feat_blob());
    }

    // optional string box_blob = 24 [default = "box_pred"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_box_blob());
    }

    // optional string iou_blob = 25 [default = "iou_pred"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_iou_blob());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string brvis_blob = 26 [default = "brvis_pred"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_brvis_blob());
    }

    // optional string brswt_blob = 27 [default = "brswt_pred"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_brswt_blob());
    }

    // optional string ltvis_blob = 28 [default = "ltvis_pred"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ltvis_blob());
    }

    // optional string ltswt_blob = 29 [default = "ltswt_pred"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ltswt_blob());
    }

    // optional string rtvis_blob = 30 [default = "rtvis_pred"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rtvis_blob());
    }

    // optional string rtswt_blob = 31 [default = "rtswt_pred"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rtswt_blob());
    }

    // optional string area_id_blob = 32 [default = "area_id_pred"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_area_id_blob());
    }

    // optional string visible_ratio_blob = 33 [default = "vis_pred"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_visible_ratio_blob());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cut_off_ratio_blob());
    }

    // optional string input_data_blob = 35 [default = "data"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_data_blob());
    }

    // optional string input_ratio_blob = 36 [default = "ratio"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_ratio_blob());
    }

    // optional string input_instric_blob = 37 [default = "K"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_instric_blob());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.smoke.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.smoke.NetworkParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.smoke.NetworkParam)
    MergeFrom(*source);
  }
}

void NetworkParam::MergeFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_det1_loc_blob(from._internal_det1_loc_blob());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_det1_obj_blob(from._internal_det1_obj_blob());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_det1_cls_blob(from._internal_det1_cls_blob());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_det1_ori_blob(from._internal_det1_ori_blob());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_det1_ori_conf_blob(from._internal_det1_ori_conf_blob());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_det1_dim_blob(from._internal_det1_dim_blob());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_det2_loc_blob(from._internal_det2_loc_blob());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_det2_obj_blob(from._internal_det2_obj_blob());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_det2_cls_blob(from._internal_det2_cls_blob());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_det2_ori_blob(from._internal_det2_ori_blob());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_det2_ori_conf_blob(from._internal_det2_ori_conf_blob());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_det2_dim_blob(from._internal_det2_dim_blob());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_det3_loc_blob(from._internal_det3_loc_blob());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_det3_obj_blob(from._internal_det3_obj_blob());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_det3_cls_blob(from._internal_det3_cls_blob());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_det3_ori_blob(from._internal_det3_ori_blob());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_det3_ori_conf_blob(from._internal_det3_ori_conf_blob());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_det3_dim_blob(from._internal_det3_dim_blob());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_lof_blob(from._internal_lof_blob());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_lor_blob(from._internal_lor_blob());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_rois_blob(from._internal_rois_blob());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_feat_blob(from._internal_feat_blob());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_box_blob(from._internal_box_blob());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_iou_blob(from._internal_iou_blob());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_brvis_blob(from._internal_brvis_blob());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_brswt_blob(from._internal_brswt_blob());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_ltvis_blob(from._internal_ltvis_blob());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_ltswt_blob(from._internal_ltswt_blob());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_rtvis_blob(from._internal_rtvis_blob());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_rtswt_blob(from._internal_rtswt_blob());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_area_id_blob(from._internal_area_id_blob());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_visible_ratio_blob(from._internal_visible_ratio_blob());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cut_off_ratio_blob(from._internal_cut_off_ratio_blob());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_input_data_blob(from._internal_input_data_blob());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_input_ratio_blob(from._internal_input_ratio_blob());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_input_instric_blob(from._internal_input_instric_blob());
    }
  }
}

void NetworkParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.smoke.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {
  return true;
}

void NetworkParam::InternalSwap(NetworkParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  det1_loc_blob_.Swap(&other->det1_loc_blob_, nullptr, GetArena());
  det1_obj_blob_.Swap(&other->det1_obj_blob_, nullptr, GetArena());
  det1_cls_blob_.Swap(&other->det1_cls_blob_, nullptr, GetArena());
  det1_ori_blob_.Swap(&other->det1_ori_blob_, nullptr, GetArena());
  det1_ori_conf_blob_.Swap(&other->det1_ori_conf_blob_, nullptr, GetArena());
  det1_dim_blob_.Swap(&other->det1_dim_blob_, nullptr, GetArena());
  det2_loc_blob_.Swap(&other->det2_loc_blob_, nullptr, GetArena());
  det2_obj_blob_.Swap(&other->det2_obj_blob_, nullptr, GetArena());
  det2_cls_blob_.Swap(&other->det2_cls_blob_, nullptr, GetArena());
  det2_ori_blob_.Swap(&other->det2_ori_blob_, nullptr, GetArena());
  det2_ori_conf_blob_.Swap(&other->det2_ori_conf_blob_, nullptr, GetArena());
  det2_dim_blob_.Swap(&other->det2_dim_blob_, nullptr, GetArena());
  det3_loc_blob_.Swap(&other->det3_loc_blob_, nullptr, GetArena());
  det3_obj_blob_.Swap(&other->det3_obj_blob_, nullptr, GetArena());
  det3_cls_blob_.Swap(&other->det3_cls_blob_, nullptr, GetArena());
  det3_ori_blob_.Swap(&other->det3_ori_blob_, nullptr, GetArena());
  det3_ori_conf_blob_.Swap(&other->det3_ori_conf_blob_, nullptr, GetArena());
  det3_dim_blob_.Swap(&other->det3_dim_blob_, nullptr, GetArena());
  lof_blob_.Swap(&other->lof_blob_, nullptr, GetArena());
  lor_blob_.Swap(&other->lor_blob_, nullptr, GetArena());
  rois_blob_.Swap(&other->rois_blob_, nullptr, GetArena());
  feat_blob_.Swap(&other->feat_blob_, nullptr, GetArena());
  box_blob_.Swap(&other->box_blob_, nullptr, GetArena());
  iou_blob_.Swap(&other->iou_blob_, nullptr, GetArena());
  brvis_blob_.Swap(&other->brvis_blob_, nullptr, GetArena());
  brswt_blob_.Swap(&other->brswt_blob_, nullptr, GetArena());
  ltvis_blob_.Swap(&other->ltvis_blob_, nullptr, GetArena());
  ltswt_blob_.Swap(&other->ltswt_blob_, nullptr, GetArena());
  rtvis_blob_.Swap(&other->rtvis_blob_, nullptr, GetArena());
  rtswt_blob_.Swap(&other->rtswt_blob_, nullptr, GetArena());
  area_id_blob_.Swap(&other->area_id_blob_, nullptr, GetArena());
  visible_ratio_blob_.Swap(&other->visible_ratio_blob_, nullptr, GetArena());
  cut_off_ratio_blob_.Swap(&other->cut_off_ratio_blob_, nullptr, GetArena());
  input_data_blob_.Swap(&other->input_data_blob_, nullptr, GetArena());
  input_ratio_blob_.Swap(&other->input_ratio_blob_, nullptr, GetArena());
  input_instric_blob_.Swap(&other->input_instric_blob_, nullptr, GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NMSParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NMSParam>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inter_cls_conf_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inter_cls_nms_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NMSParam::_i_give_permission_to_break_this_code_default_type_{{{"NormalNMS", 9}}, {nullptr}};
NMSParam::NMSParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.NMSParam)
}
NMSParam::NMSParam(const NMSParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(nullptr);
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&inter_cls_nms_thresh_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(inter_cls_nms_thresh_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.NMSParam)
}

void NMSParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NMSParam_smoke_2eproto.base);
  type_.UnsafeSetDefault(nullptr);
  threshold_ = 0.4f;
  sigma_ = 0.4f;
  inter_cls_conf_thresh_ = 0.1f;
  inter_cls_nms_thresh_ = 1;
}

NMSParam::~NMSParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.NMSParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NMSParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(nullptr);
}

void NMSParam::ArenaDtor(void* object) {
  NMSParam* _this = reinterpret_cast< NMSParam* >(object);
  (void)_this;
}
void NMSParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NMSParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NMSParam& NMSParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NMSParam_smoke_2eproto.base);
  return *internal_default_instance();
}


void NMSParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.NMSParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearToDefault(::apollo::perception::camera::smoke::NMSParam::_i_give_permission_to_break_this_code_default_type_, GetArena());
       }
    threshold_ = 0.4f;
    sigma_ = 0.4f;
    inter_cls_conf_thresh_ = 0.1f;
    inter_cls_nms_thresh_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NMSParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1 [default = "NormalNMS"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.smoke.NMSParam.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float threshold = 2 [default = 0.4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigma = 3 [default = 0.4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_sigma(&has_bits);
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inter_cls_conf_thresh = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_inter_cls_conf_thresh(&has_bits);
          inter_cls_conf_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inter_cls_nms_thresh = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_inter_cls_nms_thresh(&has_bits);
          inter_cls_nms_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NMSParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.NMSParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "NormalNMS"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NMSParam.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional float threshold = 2 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_threshold(), target);
  }

  // optional float sigma = 3 [default = 0.4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_sigma(), target);
  }

  // optional float inter_cls_conf_thresh = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_inter_cls_conf_thresh(), target);
  }

  // optional float inter_cls_nms_thresh = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_inter_cls_nms_thresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.NMSParam)
  return target;
}

size_t NMSParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.NMSParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string type = 1 [default = "NormalNMS"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional float threshold = 2 [default = 0.4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float sigma = 3 [default = 0.4];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float inter_cls_conf_thresh = 4 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float inter_cls_nms_thresh = 5 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NMSParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.smoke.NMSParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NMSParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NMSParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.smoke.NMSParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.smoke.NMSParam)
    MergeFrom(*source);
  }
}

void NMSParam::MergeFrom(const NMSParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.NMSParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      sigma_ = from.sigma_;
    }
    if (cached_has_bits & 0x00000008u) {
      inter_cls_conf_thresh_ = from.inter_cls_conf_thresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      inter_cls_nms_thresh_ = from.inter_cls_nms_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NMSParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.smoke.NMSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NMSParam::CopyFrom(const NMSParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.NMSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMSParam::IsInitialized() const {
  return true;
}

void NMSParam::InternalSwap(NMSParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, nullptr, GetArena());
  swap(threshold_, other->threshold_);
  swap(sigma_, other->sigma_);
  swap(inter_cls_conf_thresh_, other->inter_cls_conf_thresh_);
  swap(inter_cls_nms_thresh_, other->inter_cls_nms_thresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NMSParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BBoxStatistics::_Internal {
 public:
};

BBoxStatistics::BBoxStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mean_(arena),
  std_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.BBoxStatistics)
}
BBoxStatistics::BBoxStatistics(const BBoxStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mean_(from.mean_),
      std_(from.std_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.BBoxStatistics)
}

void BBoxStatistics::SharedCtor() {
}

BBoxStatistics::~BBoxStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.BBoxStatistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BBoxStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BBoxStatistics::ArenaDtor(void* object) {
  BBoxStatistics* _this = reinterpret_cast< BBoxStatistics* >(object);
  (void)_this;
}
void BBoxStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBoxStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBoxStatistics& BBoxStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBoxStatistics_smoke_2eproto.base);
  return *internal_default_instance();
}


void BBoxStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.BBoxStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_.Clear();
  std_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBoxStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mean(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mean(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float std = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_std(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_std(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBoxStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.BBoxStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mean = 1;
  for (int i = 0, n = this->_internal_mean_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mean(i), target);
  }

  // repeated float std = 2;
  for (int i = 0, n = this->_internal_std_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_std(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.BBoxStatistics)
  return target;
}

size_t BBoxStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.BBoxStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mean = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mean_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mean_size());
    total_size += data_size;
  }

  // repeated float std = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_std_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_std_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBoxStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.smoke.BBoxStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const BBoxStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBoxStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.smoke.BBoxStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.smoke.BBoxStatistics)
    MergeFrom(*source);
  }
}

void BBoxStatistics::MergeFrom(const BBoxStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.BBoxStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_.MergeFrom(from.mean_);
  std_.MergeFrom(from.std_);
}

void BBoxStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.smoke.BBoxStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxStatistics::CopyFrom(const BBoxStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.BBoxStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBoxStatistics::IsInitialized() const {
  return true;
}

void BBoxStatistics::InternalSwap(BBoxStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mean_.InternalSwap(&other->mean_);
  std_.InternalSwap(&other->std_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBoxStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DimensionStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<DimensionStatistics>()._has_bits_);
  static void set_has_mean_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mean_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mean_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_std_h(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_std_w(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_std_l(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DimensionStatistics::DimensionStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.DimensionStatistics)
}
DimensionStatistics::DimensionStatistics(const DimensionStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mean_h_, &from.mean_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_w_) -
    reinterpret_cast<char*>(&mean_h_)) + sizeof(std_w_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.DimensionStatistics)
}

void DimensionStatistics::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mean_h_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mean_l_) -
      reinterpret_cast<char*>(&mean_h_)) + sizeof(mean_l_));
  std_l_ = 1;
  std_h_ = 1;
  std_w_ = 1;
}

DimensionStatistics::~DimensionStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.DimensionStatistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DimensionStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DimensionStatistics::ArenaDtor(void* object) {
  DimensionStatistics* _this = reinterpret_cast< DimensionStatistics* >(object);
  (void)_this;
}
void DimensionStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DimensionStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionStatistics& DimensionStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DimensionStatistics_smoke_2eproto.base);
  return *internal_default_instance();
}


void DimensionStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.DimensionStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&mean_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mean_l_) -
        reinterpret_cast<char*>(&mean_h_)) + sizeof(mean_l_));
    std_l_ = 1;
    std_h_ = 1;
    std_w_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DimensionStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float mean_h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_mean_h(&has_bits);
          mean_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_mean_w(&has_bits);
          mean_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mean_l(&has_bits);
          mean_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_h = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_std_h(&has_bits);
          std_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_w = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_std_w(&has_bits);
          std_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_l = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_std_l(&has_bits);
          std_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DimensionStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.DimensionStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mean_h(), target);
  }

  // optional float mean_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_mean_w(), target);
  }

  // optional float mean_l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_mean_l(), target);
  }

  // optional float std_h = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_std_h(), target);
  }

  // optional float std_w = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_std_w(), target);
  }

  // optional float std_l = 6 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_std_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.DimensionStatistics)
  return target;
}

size_t DimensionStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.DimensionStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float mean_h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float mean_w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float mean_l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float std_l = 6 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float std_h = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float std_w = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.smoke.DimensionStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DimensionStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.smoke.DimensionStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.smoke.DimensionStatistics)
    MergeFrom(*source);
  }
}

void DimensionStatistics::MergeFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.DimensionStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mean_h_ = from.mean_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      mean_w_ = from.mean_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      mean_l_ = from.mean_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      std_l_ = from.std_l_;
    }
    if (cached_has_bits & 0x00000010u) {
      std_h_ = from.std_h_;
    }
    if (cached_has_bits & 0x00000020u) {
      std_w_ = from.std_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DimensionStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.smoke.DimensionStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionStatistics::CopyFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.DimensionStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionStatistics::IsInitialized() const {
  return true;
}

void DimensionStatistics::InternalSwap(DimensionStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DimensionStatistics, mean_l_)
      + sizeof(DimensionStatistics::mean_l_)
      - PROTOBUF_FIELD_OFFSET(DimensionStatistics, mean_h_)>(
          reinterpret_cast<char*>(&mean_h_),
          reinterpret_cast<char*>(&other->mean_h_));
  swap(std_l_, other->std_l_);
  swap(std_h_, other->std_h_);
  swap(std_w_, other->std_w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DimensionStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace smoke
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::SmokeParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::SmokeParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::SmokeParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::ModelParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::ModelParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::ModelParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::NetworkParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::NetworkParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::NetworkParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::NMSParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::NMSParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::NMSParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::BBoxStatistics* Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::BBoxStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::BBoxStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::DimensionStatistics* Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::DimensionStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::DimensionStatistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
